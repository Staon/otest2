/*
 * Copyright (C) 2020 Ondrej Starek
 *
 * This file is part of OTest2.
 *
 * OTest2 is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OTest2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OTest2.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef OTest2__OTEST2_FCEMARSHALER_H_
#define OTest2__OTEST2_FCEMARSHALER_H_

#include <memory>

#include <otest2/fcemarshalerptr.h>

namespace OTest2 {

class Context;

/**
 * @brief Generic interface of a function marshaler
 * 
 * Function marshalers run user functions (start-up, tear-down and test
 * states) and passes user data as their arguments. The actual marshalers
 * are generated by the otest2 generator.
 */
class FceMarshaler {
  public:
    /**
     * @brief Ctor
     */
    FceMarshaler();

    /**
     * @brief Dtor
     */
    virtual ~FceMarshaler();

    /* -- avoid copying */
    FceMarshaler(
        const FceMarshaler&) = delete;
    FceMarshaler& operator = (
        const FceMarshaler&) = delete;

    /**
     * @brief Run the function
     *
     * @param context_ OTest2 context
     * @warning The function may throw an exception!
     */
    virtual void runFunction(
        const Context& context_) = 0;
};

/**
 * @brief Empty marshaler - no function is invoked
 */
class EmptyMarshaler : public FceMarshaler {
  public:
    /**
     * @brief Ctor
     */
    EmptyMarshaler();

    /**
     * @brief Dtor
     */
    virtual ~EmptyMarshaler();

    /* -- avoid copying */
    EmptyMarshaler(
        const EmptyMarshaler&) = delete;
    EmptyMarshaler& operator = (
        const EmptyMarshaler&) = delete;

    /* -- marshaler interface */
    virtual void runFunction(
        const Context& context_) override;
};

} /* -- namespace OTest2 */

#endif /* -- OTest2__OTEST2_FCEMARSHALER_H_ */
