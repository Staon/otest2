# Inherit the environment
Import('*')
env = env.Clone()
env.Append(CPPPATH = ['../include/otest2'])

# Build the library
env.OTest2Suite('Library', 'otest2', [
    'assertbean.cpp',
    'assertcontext.cpp',
    'assertions.cpp',
    'base64istream.cpp',
    'base64ostream.cpp',
    'bzip2istream.cpp',
    'bzip2ostream.cpp',
    'case.cpp',
    'casefactory.cpp',
    'casegenerated.cpp',
    'caseordinary.cpp',
    'caseregistry.cpp',
    'cmddestroycase.cpp',
    'cmddestroysuite.cpp',
    'cmddummy.cpp',
    'cmdfirststate.cpp',
    'cmdnextcase.cpp',
    'cmdnextsuite.cpp',
    'cmdrunstate.cpp',
    'cmdstartcase.cpp',
    'cmdstartsuite.cpp',
    'cmdstarttest.cpp',
    'cmdstate.cpp',
    'cmdstoptest.cpp',
    'command.cpp',
    'commandstack.cpp',
    'context.cpp',
    'contextobject.cpp',
    'dfltenvironment.cpp',
    'dfltloop.cpp',
    'difflogarray.cpp',
    'difflogblock.cpp',
    'difflogbuilder.cpp',
    'difflogreverse.cpp',
    'exccatcher.cpp',
    'exccatcherordinary.cpp',
    'exctestmarkin.cpp',
    'internalerror.cpp',
    'object.cpp',
    'registry.cpp',
    'reporter.cpp',
    'reporterconsole.cpp',
    'reporterdebug.cpp',
    'reporterstatistics.cpp',
    'runcode.cpp',
    'runcode.h',
    'runner.cpp',
    'runnerfilter.cpp',
    'runnerfilterentire.cpp',
    'runnerfilterone.cpp',
    'runnerordinary.cpp',
    'semanticstack.cpp',
    'state.cpp',
    'stategenerated.cpp',
    'stateordinary.cpp',
    'stateregistry.cpp',
    'suite.cpp',
    'suitefactory.cpp',
    'suitegenerated.cpp',
    'suiteordinary.cpp',
    'teeostream.cpp',
    'terminaldriver.cpp',
    'testmark.cpp',
    'testmarkbool.cpp',
    'testmarkbuilder.cpp',
    'testmarkdiffprinter.cpp',
    'testmarkfactory.cpp',
    'testmarkfloat.cpp',
    'testmarkhash.cpp',
    'testmarkin.cpp',
    'testmarkinbin.cpp',
    'testmarkinbinios.cpp',
    'testmarkint.cpp',
    'testmarklist.cpp',
    'testmarkmap.cpp',
    'testmarknull.cpp',
    'testmarkout.cpp',
    'testmarkoutbin.cpp',
    'testmarkoutbinios.cpp',
    'testmarkprefix.cpp',
    'testmarkprinter.cpp',
    'testmarkstring.cpp',
])