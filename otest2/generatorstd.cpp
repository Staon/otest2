#include "generatorstd.h"

#include <assert.h>
#include <iostream>
#include <memory>
#include <string>

#include "filereader.h"
#include "formatting.h"
#include "vartable.h"

namespace OTest2 {

struct GeneratorStd::Impl {
  public:
    GeneratorStd* owner;
    std::ostream* output;
    FileReader* reader;

    /* -- table of variables */
    VarTablePtr variables;
    int indent;

    /* -- current state */
    std::string suite;
    std::string testcase;
    std::string state;

//    /* -- table of variables */
//    VarTablePtr variables;
//    int indent;
//
//    /* -- bodies of the constructors and destructors */
//    dstring suite_ctor;
//    dstring suite_dtor;
//    dstring case_ctor;
//    dstring case_dtor;
//    dstring state_ctor;
//    dstring state_dtor;

  private:
    /* -- avoid copying */
    Impl(
        const Impl&);
    Impl& operator =(
        const Impl&);

  public:
    explicit Impl(
        GeneratorStd* owner_,
        std::ostream* output_,
        FileReader* reader_);
    ~Impl();
};

GeneratorStd::Impl::Impl(
    GeneratorStd* owner_,
    std::ostream* output_,
    FileReader* reader_) :
  owner(owner_),
  output(output_),
  reader(reader_),
  variables(),
  indent(0) {

}

GeneratorStd::Impl::~Impl() {

}

GeneratorStd::GeneratorStd(
    std::ostream* output_,
    FileReader* reader_) :
  pimpl(new Impl(this, output_, reader_)) {

}

GeneratorStd::~GeneratorStd() {

}

void GeneratorStd::beginFile() {
  *pimpl -> output
      << "/*\n"
      << "  This file is generated by the otest2 preprocessor. Don't modify it!\n"
      << "*/\n"
      << '\n'
      << "#include <otest2/casegenerated.h>\n"
      << "#include <otest2/generutils.h>\n"
      << "#include <otest2/stategenerated.h>\n"
      << "#include <otest2/suitegenerated.h>\n"
      << '\n';
}

void GeneratorStd::copySource(
    const Location& begin_,
    const Location& end_) {
  pimpl->reader->writePart(*pimpl->output, begin_, &end_);
}

void GeneratorStd::enterSuite(
    const std::string& suite_) {
  assert(pimpl -> suite.empty() && pimpl -> testcase.empty() && pimpl -> state.empty());
  assert(!suite_.empty());

  pimpl -> suite = suite_;
  pimpl -> variables = std::make_shared<VarTable>("suite_", nullptr);
  pimpl -> indent += 2;

  *pimpl -> output
      << "class " << suite_ << " : public ::OTest2::SuiteGenerated {\n"
      << "  private:\n";
}

void GeneratorStd::suiteStartUp() {
  assert(!pimpl -> suite.empty() && pimpl -> testcase.empty() && pimpl -> state.empty());

  /* -- suite variables */
  pimpl->variables->printDeclarations(*pimpl->output, pimpl->indent);

  /* -- ctor and dtor */
  *pimpl->output
      << "\n"
      << "  public:\n"
      << "    /* -- avoid copying */\n"
      << "    " << pimpl->suite << "(\n"
      << "        const " << pimpl->suite << "&) = delete;\n"
      << "    " << pimpl->suite << "& operator = (\n"
      << "        const " << pimpl->suite << "&) = delete;\n"
      << "\n"
      << "    explicit " << pimpl->suite << "(\n"
      << "        const ::OTest2::Context& context_) :\n"
      << "      ::OTest2::SuiteGenerated(context_)";
  pimpl->variables->printInitializers(*pimpl->output, pimpl->indent + 1);
  *pimpl->output
      << " {\n"
      << "\n"
      << "    }\n"
      << "\n"
      << "    virtual ~" << pimpl->suite << "() {\n"
      << "\n"
      << "    }\n"
      << "\n"
      << "    virtual void startUp() ";
}

void GeneratorStd::suiteTearDown() {
  assert(!pimpl -> suite.empty() && pimpl -> testcase.empty() && pimpl -> state.empty());

  *pimpl->output
      << "\n\n"
      << "    virtual void tearDown() ";
}

void GeneratorStd::enterCase(
    const std::string& case_) {
  assert(!pimpl -> suite.empty() && pimpl -> testcase.empty() && pimpl -> state.empty());
  assert(!case_.empty());

  pimpl -> testcase = case_;
  pimpl -> variables = std::make_shared<VarTable>("case_", pimpl -> variables);
  pimpl -> indent += 2;

  *pimpl -> output
      <<"\n\n"
      << "    class " << case_ << " : public ::OTest2::CaseGenerated {\n"
      << "      private:\n";
}

void GeneratorStd::caseStartUp() {
  assert(!pimpl -> suite.empty() && !pimpl -> testcase.empty() && pimpl -> state.empty());

  /* -- suite variables */
  pimpl->variables->printDeclarations(*pimpl->output, pimpl->indent);

  /* -- ctor and dtor */
  *pimpl->output
      << "\n"
      << "      public:\n"
      << "        /* -- avoid copying */\n"
      << "        " << pimpl->testcase << "(\n"
      << "            const " << pimpl->testcase << "&) = delete;\n"
      << "        " << pimpl->testcase << "& operator = (\n"
      << "            const " << pimpl->testcase << "&) = delete;\n"
      << "\n"
      << "        explicit " << pimpl->testcase << "(\n"
      << "            const ::OTest2::Context& context_";
  pimpl->variables->printParameters(*pimpl->output, pimpl->indent + 2);
  *pimpl->output
      << ") :\n"
      << "          ::OTest2::CaseGenerated(context_)";
  pimpl->variables->printInitializers(*pimpl->output, pimpl->indent + 1);
  *pimpl->output
      << " {\n"
      << "\n"
      << "        }\n"
      << "\n"
      << "        virtual ~" << pimpl->testcase << "() {\n"
      << "\n"
      << "        }\n"
      << "\n"
      << "        virtual void startUp() ";
}

void GeneratorStd::caseTearDown() {
  assert(!pimpl -> suite.empty() && !pimpl -> testcase.empty() && pimpl -> state.empty());

  *pimpl->output
      << "\n\n"
      << "        virtual void tearDown() ";
}

void GeneratorStd::enterState(
    const std::string& state_) {
  assert(!pimpl -> suite.empty() && !pimpl -> testcase.empty() && pimpl -> state.empty());
  assert(!state_.empty());

  pimpl->state = state_;
  pimpl->variables = std::make_shared<VarTable>("state_", pimpl -> variables);
  pimpl->indent += 2;

  *pimpl->output
      << "\n\n"
      << "        class " << state_ << " : public ::OTest2::StateGenerated {\n"
      << "          private:\n";
  pimpl->variables -> printDeclarations(*pimpl->output, pimpl->indent);
  *pimpl->output
      << "\n"
      << "          public:\n"
      << "            /* -- avoid copying */\n"
      << "            " << state_ << "(\n"
      << "                const " << state_ << "&) = delete;\n"
      << "            " << state_ << "& operator =(\n"
      << "                const " << state_ << "&) = delete;\n"
      << "\n"
      << "            explicit " << state_ << "(\n"
      << "                const ::OTest2::Context& context_";
  pimpl->variables->printParameters(*pimpl->output, pimpl->indent + 2);
  *pimpl -> output
      << ") :\n"
      << "              ::OTest2::StateGenerated(context_)";
  pimpl->variables->printInitializers(*pimpl->output, pimpl->indent + 1);
  *pimpl->output
      << " {\n"
      << "\n"
      << "            }\n"
      << "\n"
      << "            virtual ~" << state_ << "() {\n"
      << "\n"
      << "            }\n"
      << "\n"
      << "            virtual void runState(\n"
      << "                const ::OTest2::Context& context_) ";
}

void GeneratorStd::emptyBody() {
  *pimpl->output << "{\n\n";
  Formatting::printIndent(*pimpl->output, pimpl->indent);
  *pimpl -> output << "}";
}

void GeneratorStd::appendVariable(
    const std::string& name_,
    const std::string& type_) {
  pimpl->variables->appendVariable(name_, type_);
}

void GeneratorStd::appendVariableInit(
    const std::string& name_,
    const std::string& type_,
    const Location& ibegin_,
    const Location& iend_) {
  std::string initializer_(pimpl->reader->getPart(ibegin_, iend_));
  pimpl->variables->appendVariableWithInit(name_, type_, initializer_);
}

void GeneratorStd::leaveState() {
  assert(!pimpl->suite.empty() && !pimpl->testcase.empty() && !pimpl->state.empty());

  *pimpl->output
      << "\n"
      << "        };";

  pimpl->state.clear();
  pimpl->variables = pimpl->variables->getPrevLevel();
  pimpl->indent -= 2;
}

void GeneratorStd::leaveCase() {
  assert(!pimpl->suite.empty() && !pimpl->testcase.empty() && pimpl->state.empty());

  *pimpl->output
      << "\n"
      << "    };";

  pimpl->testcase.clear();
  pimpl->variables = pimpl->variables->getPrevLevel();
  pimpl->indent -= 2;
}

void GeneratorStd::leaveSuite() {
  assert(!pimpl->suite.empty() && pimpl->testcase.empty() && pimpl->state.empty());

  *pimpl->output
      << "\n"
      << "};";

  pimpl->suite.clear();
  pimpl->variables = 0;
  pimpl->indent -= 2;
}

void GeneratorStd::endFile(
    const Location& last_) {
  pimpl->reader->writePart(*pimpl->output, last_, nullptr);
}

} /* -- namespace OTest2 */
