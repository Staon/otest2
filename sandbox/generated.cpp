/*
  This file is generated by the otest2 preprocessor. Don't modify it!
*/

#include <memory>
#include <string>

#include <otest2/casegenerated.h>
#include <otest2/contextobjectimpl.h>
#include <otest2/generutils.h>
#include <otest2/objectptr.h>
#include <otest2/registry.h>
#include <otest2/stategenerated.h>
#include <otest2/suitegenerated.h>


#line 1 "example.cpp"
#include "../include/otest2/otest2.h"

#include <iostream>
#include <memory>
#include <string>

namespace Test {

/**
 * @brief Example test suite
 */

#line 31 "generated.cpp"
class ExampleSuite : public ::OTest2::SuiteGenerated {
  private:
    typename ::OTest2::TypeOfMine<std::string>::Type suite_text;

  public:
    /* -- avoid copying */
    ExampleSuite(
        const ExampleSuite&) = delete;
    ExampleSuite& operator = (
        const ExampleSuite&) = delete;

    explicit ExampleSuite(
        const ::OTest2::Context& context_) :
      ::OTest2::SuiteGenerated(context_, "ExampleSuite"),
      suite_text("foo") {
      registerAllCases();
    }

    virtual ~ExampleSuite() {

    }

    virtual void startUp() 
#line 15 "example.cpp"
{
    /* -- make the string upper */
    suite_text = "foo";

    std::cout << "StartUp" << std::endl;
  }
#line 62 "generated.cpp"


    virtual void tearDown() {

    }

  private:
    class FirstCase : public ::OTest2::CaseGenerated {
      private:
        typename ::OTest2::TypeOfParent<std::string>::Type suite_text;
        typename ::OTest2::TypeOfMine<std::string (*(*[10][20])(void))(const std::string *const)>::Type case_var;
        typename ::OTest2::TypeOfMine<void (*)(int, const char *)>::Type case_fce;
        typename ::OTest2::TypeOfMine<char (*(*)(void))[10]>::Type fce2;
        typename ::OTest2::TypeOfMine<const char *(*const (*)(void))[10]>::Type fce3;
        typename ::OTest2::TypeOfMine<int std::__cxx11::string::*>::Type mptr;
        typename ::OTest2::TypeOfMine<int (std::__cxx11::string::*)(int)>::Type mfce;
        typename ::OTest2::TypeOfMine<std::unique_ptr<std::string>>::Type temp1;

      public:
        /* -- avoid copying */
        FirstCase(
            const FirstCase&) = delete;
        FirstCase& operator = (
            const FirstCase&) = delete;

        explicit FirstCase(
            const ::OTest2::Context& context_,
            typename ::OTest2::TypeOfParent<std::string>::Type suite_text_) :
          ::OTest2::CaseGenerated(context_, "FirstCase"),
          suite_text(suite_text_),
          case_var(),
          case_fce(),
          fce2(),
          fce3(nullptr),
          mptr(),
          mfce(),
          temp1() {
          registerAllStates(context_);
        }

        virtual ~FirstCase() {

        }

        virtual void startUp() 
#line 31 "example.cpp"
{

    }
#line 112 "generated.cpp"


        virtual void tearDown() 
#line 35 "example.cpp"
{

    }
#line 120 "generated.cpp"


        class AnonymousState : public ::OTest2::StateGenerated {
          private:
            typename ::OTest2::TypeOfParent<std::string>::Type suite_text;
            typename ::OTest2::TypeOfParent<std::string (*(*[10][20])(void))(const std::string *const)>::Type case_var;
            typename ::OTest2::TypeOfParent<void (*)(int, const char *)>::Type case_fce;
            typename ::OTest2::TypeOfParent<char (*(*)(void))[10]>::Type fce2;
            typename ::OTest2::TypeOfParent<const char *(*const (*)(void))[10]>::Type fce3;
            typename ::OTest2::TypeOfParent<int std::__cxx11::string::*>::Type mptr;
            typename ::OTest2::TypeOfParent<int (std::__cxx11::string::*)(int)>::Type mfce;
            typename ::OTest2::TypeOfParent<std::unique_ptr<std::string>>::Type temp1;

          public:
            /* -- avoid copying */
            AnonymousState(
                const AnonymousState&) = delete;
            AnonymousState& operator =(
                const AnonymousState&) = delete;

            explicit AnonymousState(
                const ::OTest2::Context& context_,
                typename ::OTest2::TypeOfParent<std::string>::Type suite_text_,
                typename ::OTest2::TypeOfParent<std::string (*(*[10][20])(void))(const std::string *const)>::Type case_var_,
                typename ::OTest2::TypeOfParent<void (*)(int, const char *)>::Type case_fce_,
                typename ::OTest2::TypeOfParent<char (*(*)(void))[10]>::Type fce2_,
                typename ::OTest2::TypeOfParent<const char *(*const (*)(void))[10]>::Type fce3_,
                typename ::OTest2::TypeOfParent<int std::__cxx11::string::*>::Type mptr_,
                typename ::OTest2::TypeOfParent<int (std::__cxx11::string::*)(int)>::Type mfce_,
                typename ::OTest2::TypeOfParent<std::unique_ptr<std::string>>::Type temp1_) :
              ::OTest2::StateGenerated(context_, "AnonymousState"),
              suite_text(suite_text_),
              case_var(case_var_),
              case_fce(case_fce_),
              fce2(fce2_),
              fce3(fce3_),
              mptr(mptr_),
              mfce(mfce_),
              temp1(temp1_) {

            }

            virtual ~AnonymousState() {

            }

            virtual void runState() 
#line 39 "example.cpp"
{
      std::cout
          << suite_text << std::endl
          << case_var << std::endl
          << case_fce << std::endl
          << fce2 << std::endl
          << fce3 << std::endl;

      throw "ahoj";
    }
#line 179 "generated.cpp"

        };

        ::OTest2::StatePtr createState_AnonymousState(
            const ::OTest2::Context& context_) {
          return ::OTest2::makePointer<AnonymousState>(
              context_,
              suite_text,
              case_var,
              case_fce,
              fce2,
              fce3,
              mptr,
              mfce,
              temp1);
        }

        void registerAllStates(
            const ::OTest2::Context& context_) {
          registerState(
              "AnonymousState",
              createState_AnonymousState(context_));
        }

    };

    ::OTest2::CasePtr createCase_FirstCase(
        const ::OTest2::Context& context_) {
      return ::OTest2::makePointer<FirstCase>(
          context_,
          suite_text);
    }

  private:
    class SecondCase : public ::OTest2::CaseGenerated {
      private:
        typename ::OTest2::TypeOfParent<std::string>::Type suite_text;
        typename ::OTest2::TypeOfMine<int>::Type case_a_;
        typename ::OTest2::TypeOfMine<std::string>::Type case_b_;

      public:
        /* -- avoid copying */
        SecondCase(
            const SecondCase&) = delete;
        SecondCase& operator = (
            const SecondCase&) = delete;

        explicit SecondCase(
            const ::OTest2::Context& context_,
            typename ::OTest2::TypeOfParent<std::string>::Type suite_text_) :
          ::OTest2::CaseGenerated(context_, "SecondCase"),
          suite_text(suite_text_),
          case_a_(1000),
          case_b_("a") {
          registerAllStates(context_);
        }

        virtual ~SecondCase() {

        }

        virtual void startUp() 
#line 55 "example.cpp"
{

    }
#line 246 "generated.cpp"


        virtual void tearDown() {

        }

        class FirstState : public ::OTest2::StateGenerated {
          private:
            typename ::OTest2::TypeOfParent<std::string>::Type suite_text;
            typename ::OTest2::TypeOfParent<int>::Type case_a_;
            typename ::OTest2::TypeOfParent<std::string>::Type case_b_;

          public:
            /* -- avoid copying */
            FirstState(
                const FirstState&) = delete;
            FirstState& operator =(
                const FirstState&) = delete;

            explicit FirstState(
                const ::OTest2::Context& context_,
                typename ::OTest2::TypeOfParent<std::string>::Type suite_text_,
                typename ::OTest2::TypeOfParent<int>::Type case_a__,
                typename ::OTest2::TypeOfParent<std::string>::Type case_b__) :
              ::OTest2::StateGenerated(context_, "FirstState"),
              suite_text(suite_text_),
              case_a_(case_a__),
              case_b_(case_b__) {

            }

            virtual ~FirstState() {

            }

            virtual void runState() 
#line 59 "example.cpp"
{
      int a_(10);
      int b_(a_ + 10);
      int c_(1010);

      testAssert("generated.cpp", 64, "a_ == b_", a_ == b_);
      testAssert("generated.cpp", 65, "case_b_ == \"a\"", case_b_ == "a");

      testAssertEqual("generated.cpp", 67, a_, c_);
    }
#line 294 "generated.cpp"

        };

        ::OTest2::StatePtr createState_FirstState(
            const ::OTest2::Context& context_) {
          return ::OTest2::makePointer<FirstState>(
              context_,
              suite_text,
              case_a_,
              case_b_);
        }

        class SecondState : public ::OTest2::StateGenerated {
          private:
            typename ::OTest2::TypeOfParent<std::string>::Type suite_text;
            typename ::OTest2::TypeOfParent<int>::Type case_a_;
            typename ::OTest2::TypeOfParent<std::string>::Type case_b_;

          public:
            /* -- avoid copying */
            SecondState(
                const SecondState&) = delete;
            SecondState& operator =(
                const SecondState&) = delete;

            explicit SecondState(
                const ::OTest2::Context& context_,
                typename ::OTest2::TypeOfParent<std::string>::Type suite_text_,
                typename ::OTest2::TypeOfParent<int>::Type case_a__,
                typename ::OTest2::TypeOfParent<std::string>::Type case_b__) :
              ::OTest2::StateGenerated(context_, "SecondState"),
              suite_text(suite_text_),
              case_a_(case_a__),
              case_b_(case_b__) {

            }

            virtual ~SecondState() {

            }

            virtual void runState() 
#line 70 "example.cpp"
{

    }
#line 341 "generated.cpp"

        };

        ::OTest2::StatePtr createState_SecondState(
            const ::OTest2::Context& context_) {
          return ::OTest2::makePointer<SecondState>(
              context_,
              suite_text,
              case_a_,
              case_b_);
        }

        void registerAllStates(
            const ::OTest2::Context& context_) {
          registerState(
              "FirstState",
              createState_FirstState(context_));
          registerState(
              "SecondState",
              createState_SecondState(context_));
        }

    };

    ::OTest2::CasePtr createCase_SecondCase(
        const ::OTest2::Context& context_) {
      return ::OTest2::makePointer<SecondCase>(
          context_,
          suite_text);
    }

  private:
    void registerAllCases() {
      registerCase(
          "FirstCase",
          std::make_shared< ::OTest2::CaseGeneratedFactory<ExampleSuite, FirstCase> >(
              this,
              &ExampleSuite::createCase_FirstCase));
      registerCase(
          "SecondCase",
          std::make_shared< ::OTest2::CaseGeneratedFactory<ExampleSuite, SecondCase> >(
              this,
              &ExampleSuite::createCase_SecondCase));
    }
};

#line 74 "example.cpp"



#line 392 "generated.cpp"
class SecondSuite : public ::OTest2::SuiteGenerated {
  private:

  public:
    /* -- avoid copying */
    SecondSuite(
        const SecondSuite&) = delete;
    SecondSuite& operator = (
        const SecondSuite&) = delete;

    explicit SecondSuite(
        const ::OTest2::Context& context_) :
      ::OTest2::SuiteGenerated(context_, "SecondSuite") {
      registerAllCases();
    }

    virtual ~SecondSuite() {

    }

    virtual void startUp() {

    }

    virtual void tearDown() {

    }

  private:
    void registerAllCases() {
    }
};

namespace {

class SuiteRegistrator {
  public:
    SuiteRegistrator() {
      ::OTest2::Registry::instance().registerSuite(
          "ExampleSuite",
          std::make_shared< ::OTest2::SuiteGeneratedFactory<ExampleSuite> >());
      ::OTest2::Registry::instance().registerSuite(
          "SecondSuite",
          std::make_shared< ::OTest2::SuiteGeneratedFactory<SecondSuite> >());
    }
} registrator_of_generated_suites;

} /* -- namespace */

#line 78 "example.cpp"


} /* -- namespace Test */
