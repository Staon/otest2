/*
 * Copyright (C) 2019 Ondrej Starek
 *
 * This file is part of OTest2.
 *
 * OTest2 is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OTest2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OTest2.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <otest2/otest2.h>

#include <iostream>
#include <string>
#include <vector>

#include "runtime.h"

namespace OTest2 {

namespace Test {

/**
 * @brief This suite tests the assertion functions
 */
TEST_SUITE(AssertionsSuite) {
  TEST_CASE(GenericAssertionPass) {
    Runtime runtime("AssertionsSuite", "GenericAssertionPass");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<GenericAssertionPass>",
        "enterState<AnonymousState>",
        "assert<1 == 1>: passed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: passed",
        "leaveCase<GenericAssertionPass>: passed",
        "leaveSuite<AssertionsSuite>: passed",
        "leaveTest<selftest>: passed",
      };

      testAssert(runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(GenericAssertionFail) {
    Runtime runtime("AssertionsSuite", "GenericAssertionFail");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<GenericAssertionFail>",
        "enterState<AnonymousState>",
        "assert<1 == 2>: failed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<GenericAssertionFail>: failed",
        "leaveSuite<AssertionsSuite>: failed",
        "leaveTest<selftest>: failed",
      };

      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(GenericAssertionBeanPass) {
    Runtime runtime("AssertionsSuite", "GenericAssertionBeanPass");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<GenericAssertionBeanPass>",
        "enterState<AnonymousState>",
        "assert<AssertBean(true, \"message 1\") message 1>: passed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: passed",
        "leaveCase<GenericAssertionBeanPass>: passed",
        "leaveSuite<AssertionsSuite>: passed",
        "leaveTest<selftest>: passed",
      };

      testAssert(runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(GenericAssertionBeanFail) {
    Runtime runtime("AssertionsSuite", "GenericAssertionBeanFail");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<GenericAssertionBeanFail>",
        "enterState<AnonymousState>",
        "assert<AssertBean(false, \"message 2\") message 2>: failed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<GenericAssertionBeanFail>: failed",
        "leaveSuite<AssertionsSuite>: failed",
        "leaveTest<selftest>: failed",
      };

      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(EqualAssertionIntPass) {
    Runtime runtime("AssertionsSuite", "EqualAssertionIntPass");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<EqualAssertionIntPass>",
        "enterState<AnonymousState>",
        "assert<relation 'a == b' has failed: a = 10, b = 10>: passed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: passed",
        "leaveCase<EqualAssertionIntPass>: passed",
        "leaveSuite<AssertionsSuite>: passed",
        "leaveTest<selftest>: passed",
      };

      testAssert(runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(EqualAssertionIntFail) {
    Runtime runtime("AssertionsSuite", "EqualAssertionIntFail");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<EqualAssertionIntFail>",
        "enterState<AnonymousState>",
        "assert<relation 'a == b' has failed: a = 9, b = 10>: failed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<EqualAssertionIntFail>: failed",
        "leaveSuite<AssertionsSuite>: failed",
        "leaveTest<selftest>: failed",
      };

      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(EqualAssertionStringPass) {
    Runtime runtime("AssertionsSuite", "EqualAssertionStringPass");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<EqualAssertionStringPass>",
        "enterState<AnonymousState>",
        "assert<relation 'a == b' has failed: a = 'Fooo', b = 'Fooo'>: passed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: passed",
        "leaveCase<EqualAssertionStringPass>: passed",
        "leaveSuite<AssertionsSuite>: passed",
        "leaveTest<selftest>: passed",
      };

      testAssert(runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(EqualAssertionStringFail) {
    Runtime runtime("AssertionsSuite", "EqualAssertionStringFail");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<EqualAssertionStringFail>",
        "enterState<AnonymousState>",
        "assert<relation 'a == b' has failed: a = 'Wrong string', b = 'Expected string'>: failed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<EqualAssertionStringFail>: failed",
        "leaveSuite<AssertionsSuite>: failed",
        "leaveTest<selftest>: failed",
      };

      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(NotEqualAssertionPass) {
    Runtime runtime("AssertionsSuite", "NotEqualAssertionPass");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<NotEqualAssertionPass>",
        "enterState<AnonymousState>",
        "assert<relation 'a != b' has failed: a = 10, b = 9>: passed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: passed",
        "leaveCase<NotEqualAssertionPass>: passed",
        "leaveSuite<AssertionsSuite>: passed",
        "leaveTest<selftest>: passed",
      };

      testAssert(runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(NotEqualAssertionFail) {
    Runtime runtime("AssertionsSuite", "NotEqualAssertionFail");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<NotEqualAssertionFail>",
        "enterState<AnonymousState>",
        "assert<relation 'a != b' has failed: a = 11, b = 11>: failed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<NotEqualAssertionFail>: failed",
        "leaveSuite<AssertionsSuite>: failed",
        "leaveTest<selftest>: failed",
      };

      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(LessAssertionPass) {
    Runtime runtime("AssertionsSuite", "LessAssertionPass");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<LessAssertionPass>",
        "enterState<AnonymousState>",
        "assert<relation 'a < b' has failed: a = 7, b = 8>: passed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: passed",
        "leaveCase<LessAssertionPass>: passed",
        "leaveSuite<AssertionsSuite>: passed",
        "leaveTest<selftest>: passed",
      };

      testAssert(runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(LessAssertionFail) {
    Runtime runtime("AssertionsSuite", "LessAssertionFail");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<LessAssertionFail>",
        "enterState<AnonymousState>",
        "assert<relation 'a < b' has failed: a = 7, b = 7>: failed",
        "leaveAssert<>",
        "assert<relation 'a < b' has failed: a = 9, b = 8>: failed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<LessAssertionFail>: failed",
        "leaveSuite<AssertionsSuite>: failed",
        "leaveTest<selftest>: failed",
      };

      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(LessOrEqualAssertionPass) {
    Runtime runtime("AssertionsSuite", "LessOrEqualAssertionPass");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<LessOrEqualAssertionPass>",
        "enterState<AnonymousState>",
        "assert<relation 'a <= b' has failed: a = 7, b = 8>: passed",
        "leaveAssert<>",
        "assert<relation 'a <= b' has failed: a = 8, b = 8>: passed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: passed",
        "leaveCase<LessOrEqualAssertionPass>: passed",
        "leaveSuite<AssertionsSuite>: passed",
        "leaveTest<selftest>: passed",
      };

      testAssert(runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(LessOrEqualAssertionFail) {
    Runtime runtime("AssertionsSuite", "LessOrEqualAssertionFail");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<LessOrEqualAssertionFail>",
        "enterState<AnonymousState>",
        "assert<relation 'a <= b' has failed: a = 8, b = 7>: failed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<LessOrEqualAssertionFail>: failed",
        "leaveSuite<AssertionsSuite>: failed",
        "leaveTest<selftest>: failed",
      };

      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(GreaterAssertionPass) {
    Runtime runtime("AssertionsSuite", "GreaterAssertionPass");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<GreaterAssertionPass>",
        "enterState<AnonymousState>",
        "assert<relation 'a > b' has failed: a = 8, b = 7>: passed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: passed",
        "leaveCase<GreaterAssertionPass>: passed",
        "leaveSuite<AssertionsSuite>: passed",
        "leaveTest<selftest>: passed",
      };

      testAssert(runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(GreaterAssertionFail) {
    Runtime runtime("AssertionsSuite", "GreaterAssertionFail");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<GreaterAssertionFail>",
        "enterState<AnonymousState>",
        "assert<relation 'a > b' has failed: a = 7, b = 7>: failed",
        "leaveAssert<>",
        "assert<relation 'a > b' has failed: a = 7, b = 8>: failed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<GreaterAssertionFail>: failed",
        "leaveSuite<AssertionsSuite>: failed",
        "leaveTest<selftest>: failed",
      };

      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(GreaterOrEqualAssertionPass) {
    Runtime runtime("AssertionsSuite", "GreaterOrEqualAssertionPass");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<GreaterOrEqualAssertionPass>",
        "enterState<AnonymousState>",
        "assert<relation 'a >= b' has failed: a = 8, b = 7>: passed",
        "leaveAssert<>",
        "assert<relation 'a >= b' has failed: a = 8, b = 8>: passed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: passed",
        "leaveCase<GreaterOrEqualAssertionPass>: passed",
        "leaveSuite<AssertionsSuite>: passed",
        "leaveTest<selftest>: passed",
      };

      testAssert(runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(GreaterOrEqualAssertionFail) {
    Runtime runtime("AssertionsSuite", "GreaterOrEqualAssertionFail");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<AssertionsSuite>",
        "enterCase<GreaterOrEqualAssertionFail>",
        "enterState<AnonymousState>",
        "assert<relation 'a >= b' has failed: a = 7, b = 8>: failed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<GreaterOrEqualAssertionFail>: failed",
        "leaveSuite<AssertionsSuite>: failed",
        "leaveTest<selftest>: failed",
      };

      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }
}

} /* -- namespace Test */

} /* -- namespace OTest2 */
