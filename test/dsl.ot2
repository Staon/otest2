/*
 * Copyright (C) 2020 Ondrej Starek
 *
 * This file is part of OTest2.
 *
 * OTest2 is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OTest2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OTest2.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <otest2/otest2.h>

#include <iostream>
#include <string>
#include <vector>

#include "runtime.h"

namespace OTest2 {

namespace Test {

TEST_SUITE(DslSuite) {
  TEST_CASE(EmptySuite) {
    TEST_SIMPLE() {
      /* -- The empty suite is removed from the scenario. Hence, it's
       *    not even entered in the report. */
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "path: selftest",
        "leaveTest<selftest>: passed",
        "path: selftest",
      };

      Runtime runtime_("EmptySuite", "", Runtime::report_paths_mark);

      testAssert(runtime_.runTheTest());
      testAssert(runtime_.reporter.checkRecords(data_));
//      runtime_.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(EmptyCaseSuite) {
    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "path: selftest",
        "enterSuite<EmptyCaseSuite>",
        "path: selftest::EmptyCaseSuite",
        "enterCase<EmptyCase>",
        "path: selftest::EmptyCaseSuite::EmptyCase",
        "enterState<AnonymousState>",
        "path: selftest::EmptyCaseSuite::EmptyCase",
        "leaveState<AnonymousState>: passed",
        "path: selftest::EmptyCaseSuite::EmptyCase",
        "leaveCase<EmptyCase>: passed",
        "path: selftest::EmptyCaseSuite::EmptyCase",
        "leaveSuite<EmptyCaseSuite>: passed",
        "path: selftest::EmptyCaseSuite",
        "leaveTest<selftest>: passed",
        "path: selftest",
      };

      Runtime runtime_("EmptyCaseSuite", "", Runtime::report_paths_mark);

      testAssert(runtime_.runTheTest());
      testAssert(runtime_.reporter.checkRecords(data_));
//      runtime_.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(ExtendedDslSuite) {
    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<ExtendedDslSuite>",
        "assert<check '==' has passed>: passed",
        "message<  ud1_ == \"user data 1\">",
        "message<actual values:>",
        "message<  \"user data 1\" == \"user data 1\">",
        "leaveAssert<>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == \"Hello suite 2!\">",
        "message<actual values:>",
        "message<  \"Hello suite 2!\" == \"Hello suite 2!\">",
        "leaveAssert<>",
        "enterCase<ExtendedDslCase>",
        "assert<check '==' has passed>: passed",
        "message<  ud1_ == \"user data 1\">",
        "message<actual values:>",
        "message<  \"user data 1\" == \"user data 1\">",
        "leaveAssert<>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == test_constant>",
        "message<actual values:>",
        "message<  \"Hello suite!\" == \"Hello suite!\">",
        "leaveAssert<>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == \"Hello suite 2!\">",
        "message<actual values:>",
        "message<  \"Hello suite 2!\" == \"Hello suite 2!\">",
        "leaveAssert<>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == case_constant>",
        "message<actual values:>",
        "message<  \"Hello case!\" == \"Hello case!\">",
        "leaveAssert<>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == \"Hello case 2!\">",
        "message<actual values:>",
        "message<  \"Hello case 2!\" == \"Hello case 2!\">",
        "leaveAssert<>",
        "enterState<AnonymousState>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == test_constant>",
        "message<actual values:>",
        "message<  \"Hello suite!\" == \"Hello suite!\">",
        "leaveAssert<>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == \"Hello suite 2!\">",
        "message<actual values:>",
        "message<  \"Hello suite 2!\" == \"Hello suite 2!\">",
        "leaveAssert<>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == case_constant>",
        "message<actual values:>",
        "message<  \"Hello case!\" == \"Hello case!\">",
        "leaveAssert<>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == \"Hello case 2!\">",
        "message<actual values:>",
        "message<  \"Hello case 2!\" == \"Hello case 2!\">",
        "leaveAssert<>",
        "leaveState<AnonymousState>: passed",
        "assert<check '==' has passed>: passed",
        "message<  ud1_ == \"user data 1\">",
        "message<actual values:>",
        "message<  \"user data 1\" == \"user data 1\">",
        "leaveAssert<>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == test_constant>",
        "message<actual values:>",
        "message<  \"Hello suite!\" == \"Hello suite!\">",
        "leaveAssert<>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == \"Hello suite 2!\">",
        "message<actual values:>",
        "message<  \"Hello suite 2!\" == \"Hello suite 2!\">",
        "leaveAssert<>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == case_constant>",
        "message<actual values:>",
        "message<  \"Hello case!\" == \"Hello case!\">",
        "leaveAssert<>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == \"Hello case 2!\">",
        "message<actual values:>",
        "message<  \"Hello case 2!\" == \"Hello case 2!\">",
        "leaveAssert<>",
        "leaveCase<ExtendedDslCase>: passed",
        "enterCase<FirstState>",
        "enterState<enteringState>",
        "leaveState<enteringState>: passed",
        "delay<10>",
        "enterState<secondState>",
        "leaveState<secondState>: passed",
        "leaveCase<FirstState>: passed",
        "enterCase<ExplicitEnteringState>",
        "enterState<enteringState>",
        "leaveState<enteringState>: passed",
        "delay<10>",
        "enterState<secondState>",
        "leaveState<secondState>: passed",
        "leaveCase<ExplicitEnteringState>: passed",
        "assert<check '==' has passed>: passed",
        "message<  ud1_ == \"user data 1\">",
        "message<actual values:>",
        "message<  \"user data 1\" == \"user data 1\">",
        "leaveAssert<>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == test_constant>",
        "message<actual values:>",
        "message<  \"Hello suite!\" == \"Hello suite!\">",
        "leaveAssert<>",
        "assert<check '==' has passed>: passed",
        "message<  str_ == \"Hello suite 2!\">",
        "message<actual values:>",
        "message<  \"Hello suite 2!\" == \"Hello suite 2!\">",
        "leaveAssert<>",
        "leaveSuite<ExtendedDslSuite>: passed",
        "leaveTest<selftest>: passed",
      };

      std::string ud1_("user data 1");
      Runtime runtime_("ExtendedDslSuite", "");
      runtime_.user_data.setDatum("ud1_", &ud1_);

      testAssert(runtime_.runTheTest());
      testAssert(runtime_.reporter.checkRecords(data_));
//      runtime_.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(StandaloneCase) {
    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "path: selftest",
        "enterCase<StandaloneCase>",
        "path: selftest::StandaloneCase",
        "enterState<AnonymousState>",
        "path: selftest::StandaloneCase",
        "assert<check '==' has passed>: passed",
        "path: selftest::StandaloneCase",
        "message<  10 == 10>",
        "path: selftest::StandaloneCase",
        "message<actual values:>",
        "path: selftest::StandaloneCase",
        "message<  10 == 10>",
        "path: selftest::StandaloneCase",
        "leaveAssert<>",
        "path: selftest::StandaloneCase",
        "leaveState<AnonymousState>: passed",
        "path: selftest::StandaloneCase",
        "leaveCase<StandaloneCase>: passed",
        "path: selftest::StandaloneCase",
        "leaveTest<selftest>: passed",
        "path: selftest",
      };

      Runtime runtime_("", "StandaloneCase", Runtime::report_paths_mark);

      testAssert(runtime_.runTheTest());
      testAssert(runtime_.reporter.checkRecords(data_));
//      runtime_.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(NestedSuites) {
    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "path: selftest",
        "enterSuite<NestedSuites>",
        "path: selftest::NestedSuites",
        "enterSuite<TheNestedSuite>",
        "path: selftest::NestedSuites::TheNestedSuite",
        "enterCase<NestedCase>",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "enterState<firstState>",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "assert<check '!=' has passed>: passed",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "message<  \"hello\" != \"world\">",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "message<actual values:>",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "message<  \"hello\" != \"world\">",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "leaveAssert<>",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "leaveState<firstState>: passed",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "delay<10>",
        "enterState<secondState>",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "assert<check '==' has failed>: failed",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "message<  \"hello\" == \"world\">",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "message<actual values:>",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "message<  \"hello\" == \"world\">",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "leaveAssert<>",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "leaveState<secondState>: failed",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "leaveCase<NestedCase>: failed",
        "path: selftest::NestedSuites::TheNestedSuite::NestedCase",
        "enterSuite<ThirdLevelSuite>",
        "path: selftest::NestedSuites::TheNestedSuite::ThirdLevelSuite",
        "enterCase<ThirdLevelCase>",
        "path: selftest::NestedSuites::TheNestedSuite::ThirdLevelSuite::ThirdLevelCase",
        "enterState<AnonymousState>",
        "path: selftest::NestedSuites::TheNestedSuite::ThirdLevelSuite::ThirdLevelCase",
        "assert<'10 < 100'>: passed",
        "path: selftest::NestedSuites::TheNestedSuite::ThirdLevelSuite::ThirdLevelCase",
        "leaveAssert<>",
        "path: selftest::NestedSuites::TheNestedSuite::ThirdLevelSuite::ThirdLevelCase",
        "leaveState<AnonymousState>: passed",
        "path: selftest::NestedSuites::TheNestedSuite::ThirdLevelSuite::ThirdLevelCase",
        "leaveCase<ThirdLevelCase>: passed",
        "path: selftest::NestedSuites::TheNestedSuite::ThirdLevelSuite::ThirdLevelCase",
        "leaveSuite<ThirdLevelSuite>: passed",
        "path: selftest::NestedSuites::TheNestedSuite::ThirdLevelSuite",
        "leaveSuite<TheNestedSuite>: failed",
        "path: selftest::NestedSuites::TheNestedSuite",
        "enterCase<CaseAtFirstLevel>",
        "path: selftest::NestedSuites::CaseAtFirstLevel",
        "enterState<AnonymousState>",
        "path: selftest::NestedSuites::CaseAtFirstLevel",
        "assert<check '==' has passed>: passed",
        "path: selftest::NestedSuites::CaseAtFirstLevel",
        "message<  \"foo\" == \"foo\">",
        "path: selftest::NestedSuites::CaseAtFirstLevel",
        "message<actual values:>",
        "path: selftest::NestedSuites::CaseAtFirstLevel",
        "message<  \"foo\" == \"foo\">",
        "path: selftest::NestedSuites::CaseAtFirstLevel",
        "leaveAssert<>",
        "path: selftest::NestedSuites::CaseAtFirstLevel",
        "leaveState<AnonymousState>: passed",
        "path: selftest::NestedSuites::CaseAtFirstLevel",
        "leaveCase<CaseAtFirstLevel>: passed",
        "path: selftest::NestedSuites::CaseAtFirstLevel",
        "leaveSuite<NestedSuites>: failed",
        "path: selftest::NestedSuites",
        "leaveTest<selftest>: failed",
        "path: selftest",
      };
      Runtime runtime_("NestedSuites", "", Runtime::report_paths_mark);
      testAssert(!runtime_.runTheTest());
      testAssert(runtime_.reporter.checkRecords(data_));
//      runtime_.reporter.dumpRecords(std::cout);
    }
  }
}

} /* -- namespace Test */

} /* -- namespace OTest2 */
