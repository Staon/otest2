/*
 * Copyright (C) 2019 Ondrej Starek
 *
 * This file is part of OTest2.
 *
 * OTest2 is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OTest2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OTest2.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <otest2/otest2.h>

#include <assert.h>
#include <iostream>
#include <vector>

#include <difflogarray.h>
#include <difflogblock.h>

namespace OTest2 {

namespace Test {

namespace {

std::string makeMark(
    const std::string& left_,
    const std::string& right_,
    const DiffLogArray& diff_) {
  std::string l_(left_);
  std::string r_(right_);
  for(const auto& rec_ : diff_) {
    switch(rec_.action) {
      case DiffAction::CHANGE:
        l_[rec_.left_index] = '-';
        r_[rec_.right_index] = '-';
        break;
      case DiffAction::INSERT:
        l_[rec_.left_index] = '-';
        break;
      case DiffAction::DELETE:
        r_[rec_.right_index] = '-';
        break;
      default:
        assert(false);
    }
  }
  return l_ + " " + r_;
}

std::string runHirschberg(
    const std::string& left_,
    const std::string& right_) {
  DiffLogArray diff_;
  hirschbergDiff(
      left_.c_str(), left_.size(), right_.c_str(), right_.size(), diff_);
  return makeMark(left_, right_, diff_);
}

std::string makeMark(
    const std::string& left_,
    const std::string& right_,
    const DiffLogBlocks& diff_) {
  std::string l_(left_);
  std::string r_(right_);
  for(const auto& rec_ : diff_) {
    for(int i_(rec_.left_begin); i_ < rec_.left_end; ++i_)
      l_[i_] = '-';
    for(int i_(rec_.right_begin); i_ < rec_.right_end; ++i_)
      r_[i_] = '-';
  }
  return l_ + " " + r_;
}

std::string runHirschbergBlock(
    const std::string& left_,
    const std::string& right_) {
  DiffLogBlocks diff_;
  DiffLogBuilderBlock diff_builder_(&diff_);
  hirschbergDiff(
      left_.c_str(), left_.size(), right_.c_str(), right_.size(), diff_builder_);
  return makeMark(left_, right_, diff_);
}

} /* -- namespace */

TEST_SUITE(Hirschberg) {
  TEST_CASE(SomeStrings) {
    TEST_SIMPLE() {
      /* -- some random strings */
      testAssertEqual(runHirschberg("AGGTAB", "GXTXAYB"), "-G-TAB G-T-A-B");
      testAssertEqual(runHirschberg("banana", "ananas"), "-anana anana-");
      testAssertEqual(
          runHirschberg(
              "abbcaadcccccbbbaaacccccccccbbabcabcabcabc",
              "cbacba"),
          "--------------------------c---b-a-c-b-a-- cbacba");
      testAssertEqual(
          runHirschberg(
              "cbacba",
              "abbcaadcccccbbbaaacccccccccbbabcabcabcabc"),
          "cbacba --------------------------c---b-a-c-b-a--");

      /* -- boundaries */
      testAssertEqual(
          runHirschberg(
              "two exactly same strings",
              "two exactly same strings"),
          "two exactly same strings two exactly same strings");
      testAssertEqual(
          runHirschberg(
              "abcdefghijklmnopqrstuvwxyz",
              "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
          "-------------------------- --------------------------");
      testAssertEqual(
          runHirschberg(
              "a",
              "abbcaadcccccbbbaaacccccccccbbabcabcabcabc"),
          "a --------------------------------------a--");
      testAssertEqual(
          runHirschberg(
              "abbcaadcccccbbbaaacccccccccbbabcabcabcabc",
              "c"),
          "----------------------------------------c c");
      testAssertEqual(
          runHirschberg(
              "",
              "abbcaadcccccbbbaaacccccccccbbabcabcabcabc"),
          " -----------------------------------------");
      testAssertEqual(
          runHirschberg(
              "abbcaadcccccbbbaaacccccccccbbabcabcabcabc",
              ""),
          "----------------------------------------- ");
      testAssertEqual(runHirschberg("", ""), " ");
    }
  }

  TEST_CASE(StringsBlockDiff) {
    TEST_SIMPLE() {
      /* -- some random strings */
      testAssertEqual(
          runHirschbergBlock("AGGTAB", "GXTXAYB"), "-G-TAB G-T-A-B");
      testAssertEqual(
          runHirschbergBlock("banana", "ananas"), "-anana anana-");
      testAssertEqual(
          runHirschbergBlock(
              "abbcaadcccccbbbaaacccccccccbbabcabcabcabc",
              "cbacba"),
          "--------------------------c---b-a-c-b-a-- cbacba");
      testAssertEqual(
          runHirschbergBlock(
              "cbacba",
              "abbcaadcccccbbbaaacccccccccbbabcabcabcabc"),
          "cbacba --------------------------c---b-a-c-b-a--");

      /* -- boundaries */
      testAssertEqual(
          runHirschbergBlock(
              "two exactly same strings",
              "two exactly same strings"),
          "two exactly same strings two exactly same strings");
      testAssertEqual(
          runHirschbergBlock(
              "abcdefghijklmnopqrstuvwxyz",
              "ABCDEFGHIJKLMNOPQRSTUVWXYZ"),
          "-------------------------- --------------------------");
      testAssertEqual(
          runHirschbergBlock(
              "a",
              "abbcaadcccccbbbaaacccccccccbbabcabcabcabc"),
          "a --------------------------------------a--");
      testAssertEqual(
          runHirschbergBlock(
              "abbcaadcccccbbbaaacccccccccbbabcabcabcabc",
              "c"),
          "----------------------------------------c c");
      testAssertEqual(
          runHirschbergBlock(
              "",
              "abbcaadcccccbbbaaacccccccccbbabcabcabcabc"),
          " -----------------------------------------");
      testAssertEqual(
          runHirschbergBlock(
              "abbcaadcccccbbbaaacccccccccbbabcabcabcabc",
              ""),
          "----------------------------------------- ");
      testAssertEqual(runHirschbergBlock("", ""), " ");
    }
  }
}

} /* -- namespace Test */

} /* -- namespace OTest2 */
