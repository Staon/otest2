/*
 * Copyright (C) 2020 Ondrej Starek
 *
 * This file is part of OTest2
 *
 * OTest2 is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OTest2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OTest2.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <otest2/otest2.h>

#include <iostream>
#include <vector>

#include "runtime.h"

namespace OTest2 {

namespace Test {

TEST_SUITE(ItemWiseComparisons) {
  TEST_CASE(VectorComparison) {
    Runtime runtime("ItemWiseComparisons", "VectorComparison");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<ItemWiseComparisons>",
        "enterCase<VectorComparison>",
        "enterState<AnonymousState>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] != b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 1>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] != b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 1>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] != b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 1>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] != b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 1>",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] != b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 1>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] != b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 1>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] != b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 1>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] != b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 1>",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] < b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 0>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] < b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 0>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] < b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 0>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] < b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 0>",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<VectorComparison>: failed",
        "leaveSuite<ItemWiseComparisons>: failed",
        "leaveTest<selftest>: failed",
      };
      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(ListComparison) {
    Runtime runtime("ItemWiseComparisons", "ListComparison");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<ItemWiseComparisons>",
        "enterCase<ListComparison>",
        "enterState<AnonymousState>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] == b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 0>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] == b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 0>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] == b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 0>",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<ListComparison>: failed",
        "leaveSuite<ItemWiseComparisons>: failed",
        "leaveTest<selftest>: failed",
      };
      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(SetComparison) {
    Runtime runtime("ItemWiseComparisons", "SetComparison");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<ItemWiseComparisons>",
        "enterCase<SetComparison>",
        "enterState<AnonymousState>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] == b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 0>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] == b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 0>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] == b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 0>",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<SetComparison>: failed",
        "leaveSuite<ItemWiseComparisons>: failed",
        "leaveTest<selftest>: failed",
      };
      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(DequeComparison) {
    Runtime runtime("ItemWiseComparisons", "DequeComparison");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<ItemWiseComparisons>",
        "enterCase<DequeComparison>",
        "enterState<AnonymousState>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] == b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 0>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] == b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 0>",
        "leaveAssert<>",
        "assert<the 0th item has failed: a[0] == b[0]>: failed",
        "message<a[0] = 1>",
        "message<b[0] = 0>",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<DequeComparison>: failed",
        "leaveSuite<ItemWiseComparisons>: failed",
        "leaveTest<selftest>: failed",
      };
      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(MixedComparison) {
    Runtime runtime("ItemWiseComparisons", "MixedComparison");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<ItemWiseComparisons>",
        "enterCase<MixedComparison>",
        "enterState<AnonymousState>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<the check has passed>: passed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is smaller then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "assert<left container is bigger then the right one>: failed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<MixedComparison>: failed",
        "leaveSuite<ItemWiseComparisons>: failed",
        "leaveTest<selftest>: failed",
      };
      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }
}

} /* -- namespace Test */

} /* -- namespace OTest2 */
