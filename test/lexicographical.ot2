/*
 * Copyright (C) 2020 Ondrej Starek
 *
 * This file is part of OTest2
 *
 * OTest2 is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OTest2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OTest2.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <otest2/otest2.h>

#include <iostream>
#include <vector>

#include "runtime.h"

namespace OTest2 {

namespace Test {

TEST_SUITE(LexicographicalComparisons) {
  TEST_CASE(VectorComparison) {
    Runtime runtime("LexicographicalComparisons", "VectorComparison");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<LexicographicalComparisons>",
        "enterCase<VectorComparison>",
        "enterState<AnonymousState>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the lists are the same length>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the lists are the same length>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the lists are the same length>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the lists are the same length>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the list a is longer>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the list a is longer>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the list a is longer>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the list a is longer>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed: one list is the prefix of the other one>: passed",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed: one list is the prefix of the other one>: passed",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed: one list is the prefix of the other one>: passed",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed: one list is the prefix of the other one>: passed",
        "leaveAssert<>",
        "assert<the 1st items have failed: a[1] < b[1]>: failed",
        "message<a[1] = 2>",
        "message<b[1] = 1>",
        "leaveAssert<>",
        "assert<the 1st items have failed: a[1] < b[1]>: failed",
        "message<a[1] = 2>",
        "message<b[1] = 1>",
        "leaveAssert<>",
        "assert<the 1st items have failed: a[1] < b[1]>: failed",
        "message<a[1] = 2>",
        "message<b[1] = 1>",
        "leaveAssert<>",
        "assert<the 1st items have failed: a[1] < b[1]>: failed",
        "message<a[1] = 2>",
        "message<b[1] = 1>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed>: passed",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed>: passed",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed>: passed",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed>: passed",
        "leaveAssert<>",
        "assert<the assertion 'a <= b' has passed: one list is the prefix of the other one>: passed",
        "leaveAssert<>",
        "assert<the assertion 'a <= b' has failed.>: failed",
        "message<the list a is longer>",
        "leaveAssert<>",
        "assert<the assertion 'a <= b' has passed: one list is the prefix of the other one>: passed",
        "leaveAssert<>",
        "assert<the 1st items have failed: a[1] <= b[1]>: failed",
        "message<a[1] = 2>",
        "message<b[1] = 1>",
        "leaveAssert<>",
        "assert<the assertion 'a <= b' has passed>: passed",
        "leaveAssert<>",
        "assert<the assertion 'a > b' has failed.>: failed",
        "message<the lists are the same length>",
        "leaveAssert<>",
        "assert<the assertion 'a > b' has passed: one list is the prefix of the other one>: passed",
        "leaveAssert<>",
        "assert<the assertion 'a > b' has failed.>: failed",
        "message<the list a is shorter>",
        "leaveAssert<>",
        "assert<the assertion 'a > b' has passed>: passed",
        "leaveAssert<>",
        "assert<the 1st items have failed: a[1] > b[1]>: failed",
        "message<a[1] = 2>",
        "message<b[1] = 3>",
        "leaveAssert<>",
        "assert<the assertion 'a >= b' has passed: one list is the prefix of the other one>: passed",
        "leaveAssert<>",
        "assert<the assertion 'a >= b' has passed: one list is the prefix of the other one>: passed",
        "leaveAssert<>",
        "assert<the assertion 'a >= b' has failed.>: failed",
        "message<the list a is shorter>",
        "leaveAssert<>",
        "assert<the assertion 'a >= b' has passed>: passed",
        "leaveAssert<>",
        "assert<the 1st items have failed: a[1] >= b[1]>: failed",
        "message<a[1] = 2>",
        "message<b[1] = 3>",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<VectorComparison>: failed",
        "leaveSuite<LexicographicalComparisons>: failed",
        "leaveTest<selftest>: failed",
      };
      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(ListComparison) {
    Runtime runtime("LexicographicalComparisons", "ListComparison");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<LexicographicalComparisons>",
        "enterCase<ListComparison>",
        "enterState<AnonymousState>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the lists are the same length>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the list a is longer>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed: one list is the prefix of the other one>: passed",
        "leaveAssert<>",
        "assert<the 1st items have failed: a[1] < b[1]>: failed",
        "message<a[1] = 2>",
        "message<b[1] = 1>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed>: passed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<ListComparison>: failed",
        "leaveSuite<LexicographicalComparisons>: failed",
        "leaveTest<selftest>: failed",
      };
      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(DequeComparison) {
    Runtime runtime("LexicographicalComparisons", "DequeComparison");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<LexicographicalComparisons>",
        "enterCase<DequeComparison>",
        "enterState<AnonymousState>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the lists are the same length>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the list a is longer>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed: one list is the prefix of the other one>: passed",
        "leaveAssert<>",
        "assert<the 1st items have failed: a[1] < b[1]>: failed",
        "message<a[1] = 2>",
        "message<b[1] = 1>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed>: passed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<DequeComparison>: failed",
        "leaveSuite<LexicographicalComparisons>: failed",
        "leaveTest<selftest>: failed",
      };
      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(SetComparison) {
    Runtime runtime("LexicographicalComparisons", "SetComparison");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<LexicographicalComparisons>",
        "enterCase<SetComparison>",
        "enterState<AnonymousState>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the lists are the same length>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the list a is longer>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed: one list is the prefix of the other one>: passed",
        "leaveAssert<>",
        "assert<the 1st items have failed: a[1] < b[1]>: failed",
        "message<a[1] = 3>",
        "message<b[1] = 2>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed>: passed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<SetComparison>: failed",
        "leaveSuite<LexicographicalComparisons>: failed",
        "leaveTest<selftest>: failed",
      };
      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(MultisetComparison) {
    Runtime runtime("LexicographicalComparisons", "MultisetComparison");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<LexicographicalComparisons>",
        "enterCase<MultisetComparison>",
        "enterState<AnonymousState>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the lists are the same length>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the list a is longer>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed: one list is the prefix of the other one>: passed",
        "leaveAssert<>",
        "assert<the 1st items have failed: a[1] < b[1]>: failed",
        "message<a[1] = 2>",
        "message<b[1] = 1>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed>: passed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<MultisetComparison>: failed",
        "leaveSuite<LexicographicalComparisons>: failed",
        "leaveTest<selftest>: failed",
      };
      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(MixedComparison) {
    Runtime runtime("LexicographicalComparisons", "MixedComparison");

    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<LexicographicalComparisons>",
        "enterCase<MixedComparison>",
        "enterState<AnonymousState>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the lists are the same length>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has failed.>: failed",
        "message<the list a is longer>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed: one list is the prefix of the other one>: passed",
        "leaveAssert<>",
        "assert<the 1st items have failed: a[1] < b[1]>: failed",
        "message<a[1] = 2>",
        "message<b[1] = 1>",
        "leaveAssert<>",
        "assert<the assertion 'a < b' has passed>: passed",
        "leaveAssert<>",
        "leaveState<AnonymousState>: failed",
        "leaveCase<MixedComparison>: failed",
        "leaveSuite<LexicographicalComparisons>: failed",
        "leaveTest<selftest>: failed",
      };
      testAssert(!runtime.runTheTest());
      testAssert(runtime.reporter.checkRecords(data_));
//      runtime.reporter.dumpRecords(std::cout);
    }
  }
}

} /* -- namespace Test */

} /* -- namespace OTest2 */



