/*
 * Copyright (C) 2019 Ondrej Starek
 *
 * This file is part of OTest2.
 *
 * OTest2 is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OTest2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OTest2.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <otest2/otest2.h>

#include <string>

namespace OTest2 {

namespace SelfTest {

/**
 * @brief This suite tests the assertion functions
 */
TEST_SUITE(AssertionsSuite) {
  TEST_CASE(GenericAssertionPass) {
    TEST_SIMPLE() {
      testAssert(1 == 1);
    }
  }

  TEST_CASE(GenericAssertionFail) {
    TEST_SIMPLE() {
      testAssert(1 == 2);
    }
  }

  TEST_CASE(GenericAssertionBeanPass) {
    TEST_SIMPLE() {
      testAssert(AssertBean(true, "message 1"));
    }
  }

  TEST_CASE(GenericAssertionBeanFail) {
    TEST_SIMPLE() {
      testAssert(AssertBean(false, "message 2"));
    }
  }

  TEST_CASE(EqualAssertionIntPass) {
    TEST_SIMPLE() {
      testAssertEqual(10, 10u);
    }
  }

  TEST_CASE(EqualAssertionIntFail) {
    TEST_SIMPLE() {
      testAssertEqual(9l, 10);
    }
  }

  TEST_CASE(EqualAssertionStringPass) {
    TEST_SIMPLE() {
      testAssertEqual(std::string("Fooo"), "Fooo");
    }
  }

  TEST_CASE(EqualAssertionStringFail) {
    TEST_SIMPLE() {
      testAssertEqual("Wrong string", std::string("Expected string"));
    }
  }

  TEST_CASE(NotEqualAssertionPass) {
    TEST_SIMPLE() {
      testAssertNotEqual(10, 9);
    }
  }

  TEST_CASE(NotEqualAssertionFail) {
    TEST_SIMPLE() {
      testAssertNotEqual(11, 11);
    }
  }

  TEST_CASE(LessAssertionPass) {
    TEST_SIMPLE() {
      testAssertLess(7, 8);
    }
  }

  TEST_CASE(LessAssertionFail) {
    TEST_SIMPLE() {
      testAssertLess(7, 7);
      testAssertLess(9, 8);
    }
  }

  TEST_CASE(LessOrEqualAssertionPass) {
    TEST_SIMPLE() {
      testAssertLessOrEqual(7, 8);
      testAssertLessOrEqual(8, 8);
    }
  }

  TEST_CASE(LessOrEqualAssertionFail) {
    TEST_SIMPLE() {
      testAssertLessOrEqual(8, 7);
    }
  }

  TEST_CASE(GreaterAssertionPass) {
    TEST_SIMPLE() {
      testAssertGreater(8, 7);
    }
  }

  TEST_CASE(GreaterAssertionFail) {
    TEST_SIMPLE() {
      testAssertGreater(7, 7);
      testAssertGreater(7, 8);
    }
  }

  TEST_CASE(GreaterOrEqualAssertionPass) {
    TEST_SIMPLE() {
      testAssertGreaterOrEqual(8, 7);
      testAssertGreaterOrEqual(8, 8);
    }
  }

  TEST_CASE(GreaterOrEqualAssertionFail) {
    TEST_SIMPLE() {
      testAssertGreaterOrEqual(7, 8);
    }
  }

  TEST_CASE(GenericComparisonAssertion) {
    TEST_SIMPLE() {
      testAssertCmp<Equal>(10, 10);
      testAssertCmp<NotEqual>(10, 10);
      testAssertCmp<Less>(9, 10);
      testAssertCmp<LessOrEqual>(10, 10);
    }
  }

  TEST_CASE(ExpressionAssertion) {
    TEST_SIMPLE() {
      testAssertExpr(10 == 2 * 5);
      testAssertExpr(((2 * 6 != 5 + 5)));
      testAssertExpr(10 > 5);
      testAssertExpr(10 >= 5);
      testAssertExpr(10 < 5);
      testAssertExpr(10
          <= 5);
      testAssertExpr(std::string().empty());
      testAssertExpr(!(10 == 15));
    }
  }

  TEST_CASE(FloatingPointAssertions) {
    TEST_SIMPLE() {
      const float epsilon_(1e-6);
      const float value1_(1.246);
      const double value2_(value1_ + epsilon_ / 2.0);
      const long double value3_(value1_ + 2.0 * epsilon_);

      /* -- specific comparison assertions */
      testAssertEqualFP(value1_, value2_, epsilon_);
      testAssertEqualFP(value2_, value1_, epsilon_);
      testAssertNotEqualFP(value1_, value3_, epsilon_);
      testAssertNotEqualFP(value3_, value1_, epsilon_);

      /* -- generic comparison assertion */
      testAssertCmpFP<EqualFP>(value1_, value2_, epsilon_);
      testAssertCmpFP<EqualFP>(value2_, value1_, epsilon_);
      testAssertCmpFP<NotEqualFP>(value1_, value3_, epsilon_);
      testAssertCmpFP<NotEqualFP>(value3_, value1_, epsilon_);

      /* -- with default precision */
      testAssertEqualFP(value1_, value1_);
      testAssertNotEqual(value1_, value3_);
      testAssertCmpFP<EqualFP>(value1_, value1_);
      testAssertCmpFP<NotEqualFP>(value1_, value3_);
    }
  }
}

} /* -- namespace SelfTest */

} /* -- namespace OTest2 */
