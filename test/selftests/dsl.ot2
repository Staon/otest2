/*
 * Copyright (C) 2020 Ondrej Starek
 *
 * This file is part of OTest2.
 *
 * OTest2 is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OTest2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OTest2.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <otest2/otest2.h>

/* -- verification of some DSL constructions */

namespace OTest2 {

namespace SelfTest {

TEST_SUITE(EmptySuite) {

}

TEST_SUITE(EmptyCaseSuite) {
  TEST_CASE(EmptyCase) {

  }
}

OT2_SUITE(ExtendedDslSuite) {
  /* -- forward declarations of user functions are allowed among the fixtures */
  std::string generateTestString();
  const std::string test_constant(generateTestString());

  void suiteFunction2(
      const std::string& str_);

  /* -- This function has a body so it stops the fixture block. */
  std::string generateTestString() {
    return "Hello suite!";
  }

  void suiteFunction1(
      const std::string& str_) {
    testAssertEqual(str_, test_constant);
  }

  void tearSuiteDown(
      const std::string& ud1_) OT2_TEAR_DOWN() {
    testAssertEqual(ud1_, "user data 1");
    suiteFunction1("Hello suite!");
    suiteFunction2("Hello suite 2!");
  }

  void suiteFunction2(
      const std::string& str_) {
    testAssertEqual(str_, "Hello suite 2!");
  }

  void startSuiteUp(
      const std::string& ud1_) OT2_START_UP() {
    testAssertEqual(ud1_, "user data 1");
    suiteFunction2("Hello suite 2!");
  }

  OT2_CASE(ExtendedDslCase) {
    /* -- forward declarations of user functions are allowed among the fixtures */
    std::string generateCaseText();
    const std::string case_constant(generateCaseText());

    void caseFunction2(
        const std::string& str_);

    void caseFunction1(
        const std::string& str_) {
      testAssertEqual(str_, case_constant);
    }

    std::string generateCaseText() {
      return "Hello case!";
    }

    void tearCaseDown(
        const std::string& ud1_) OT2_TEAR_DOWN() {
      testAssertEqual(ud1_, "user data 1");
      suiteFunction1(generateTestString());
      suiteFunction2("Hello suite 2!");
      caseFunction1(generateCaseText());
      caseFunction2("Hello case 2!");
    }

    void startCaseUp(
        const std::string& ud1_) OT2_START_UP() {
      testAssertEqual(ud1_, "user data 1");
      suiteFunction1("Hello suite!");
      suiteFunction2("Hello suite 2!");
      caseFunction1("Hello case!");
      caseFunction2("Hello case 2!");
    }

    void caseFunction2(
        const std::string& str_) {
      testAssertEqual(str_, "Hello case 2!");
    }

    OT2_SIMPLE() {
      suiteFunction1("Hello suite!");
      suiteFunction2("Hello suite 2!");
      caseFunction1("Hello case!");
      caseFunction2("Hello case 2!");
    }
  }

  OT2_CASE(FirstState) {
    /* -- the entering state in this case is selected by first delcaration */
    void secondState() OT2_STATE();

    void enteringState() OT2_STATE() {
      switchState(secondState, 10);
    }

    void secondState() OT2_STATE() {

    }
  }

  OT2_CASE(ExplicitEnteringState) {
    /* -- the entering state is selected explicitly by the scenario mark */
    void secondState() OT2_STATE() {

    }

    void enteringState() OT2_SCENARIO() {
      switchState(secondState, 10);
    }
  }
}

OT2_CASE(StandaloneCase) {
  OT2_SIMPLE() {
    testAssertEqual(10, 10);
  }
}

OT2_SUITE(NestedSuites) {
  OT2_SUITE(TheNestedSuite) {
    OT2_CASE(NestedCase) {
      void secondState() OT2_STATE() {
        testAssertEqual("hello", "world");
      }

      void firstState() OT2_SCENARIO() {
        testAssertNotEqual("hello", "world");

        switchState(secondState, 10);
      }
    }

    OT2_SUITE(ThirdLevelSuite) {
      OT2_CASE(ThirdLevelCase) {
        OT2_SIMPLE() {
          testAssert(10 < 100);
        }
      }
    }
  }

  OT2_CASE(CaseAtFirstLevel) {
    OT2_SIMPLE() {
      testAssertEqual("foo", "foo");
    }
  }
}

} /* -- namespace SelfTest */

} /* -- namespace OTest2 */
