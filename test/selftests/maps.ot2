/*
 * Copyright (C) 2020 Ondrej Starek
 *
 * This file is part of OTest2
 *
 * OTest2 is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OTest2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OTest2.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <otest2/otest2.h>

#include <map>
#include <unordered_map>

namespace OTest2 {

namespace SelfTest {

TEST_SUITE(MapComparisons) {
  TEST_CASE(MapAssertions) {
    TEST_SIMPLE() {
      std::map<std::string, int> a_{{"A", 1}, {"B", 2}, {"C", 3}};
      std::map<std::string, int> b_{{"A", 1}, {"B", 2}};
      std::map<std::string, int> c_{{"A", 1}, {"B", 2}, {"C", 3}, {"D", 4}};
      std::map<std::string, int> d_;
      std::map<std::string, int> e_{{"A", 1}, {"B", 666}, {"C", 3}};
      std::map<std::string, int> f_{{"A", 1}, {"B", 2}, {"C", 666}};

      /* -- compare non-empty containers */
      testAssertMap<Equal>(a_, a_);
      testAssertMap<Equal>(a_, b_);
      testAssertMap<Equal>(a_, c_);
      testAssertMap<Equal>(a_, e_);
      testAssertMap<Equal>(a_, f_);

      /* -- check empty containers */
      testAssertMap<Equal>(a_, d_);
      testAssertMap<Equal>(d_, a_);
      testAssertMap<Equal>(d_, d_);
    }
  }

  TEST_CASE(UnorderedMapAssertions) {
    TEST_SIMPLE() {
      std::unordered_map<std::string, int> a_{{"A", 1}, {"B", 2}, {"C", 3}};
      std::unordered_map<std::string, int> b_{{"A", 1}, {"B", 2}};
      std::unordered_map<std::string, int> c_{{"A", 1}, {"B", 2}, {"C", 3}, {"D", 4}};
      std::unordered_map<std::string, int> d_;
      std::unordered_map<std::string, int> e_{{"A", 1}, {"B", 666}, {"C", 3}};
      std::unordered_map<std::string, int> f_{{"A", 1}, {"B", 2}, {"C", 666}};
      std::unordered_map<std::string, int> g_{{"A", 1}};

      /* -- Compare non-empty container. As the container is not
       *    ordered the difference must be just one item to get a stable
       *    error message. */
      testAssertMap<Equal>(a_, a_);
      testAssertMap<Equal>(a_, b_);
      testAssertMap<Equal>(a_, c_);
      testAssertMap<Equal>(a_, e_);
      testAssertMap<Equal>(a_, f_);

      /* -- Check empty containers As the container is not ordered, the non-empty
       *    containers must contain just one item to get stable error message. */
      testAssertMap<Equal>(g_, d_);
      testAssertMap<Equal>(d_, g_);
      testAssertMap<Equal>(d_, d_);
    }
  }

  TEST_CASE(MultiMapAssertions) {
    TEST_SIMPLE() {
      /* -- no subsequences */
      std::multimap<std::string, int> a_{{"A", 1}, {"B", 2}, {"C", 3}};
      std::multimap<std::string, int> b_{{"A", 1}, {"B", 2}};
      std::multimap<std::string, int> c_{{"A", 1}, {"B", 2}, {"C", 3}, {"D", 4}};
      std::multimap<std::string, int> d_{{"A", 1}, {"B", 666}, {"C", 3}};
      std::multimap<std::string, int> e_{{"A", 1}, {"B", 2}, {"C", 666}};
      testAssertMap<Equal>(a_, a_);
      testAssertMap<Equal>(a_, b_);
      testAssertMap<Equal>(a_, c_);
      testAssertMap<Equal>(a_, d_);
      testAssertMap<Equal>(a_, e_);

      /* -- subsequences */
      std::multimap<std::string, int> sa_{{"A", 1}, {"B", 2}, {"B", 3}, {"C", 4}, {"C", 5}};
      std::multimap<std::string, int> sb_{{"A", 1}, {"B", 666}, {"B", 3}, {"C", 4}, {"C", 5}};
      std::multimap<std::string, int> sc_{{"A", 1}, {"B", 2}, {"B", 666}, {"C", 4}, {"C", 5}};
      std::multimap<std::string, int> sd_{{"A", 1}, {"B", 2}, {"B", 3}, {"C", 666}, {"C", 5}};
      std::multimap<std::string, int> se_{{"A", 1}, {"B", 2}, {"B", 3}, {"C", 4}, {"C", 666}};
      std::multimap<std::string, int> sf_{{"A", 1}, {"B", 2}, {"C", 4}, {"C", 5}};
      std::multimap<std::string, int> sg_{{"A", 1}, {"C", 4}, {"C", 5}};
      std::multimap<std::string, int> sh_{{"A", 1}, {"B", 2}, {"B", 3}, {"C", 4}};
      std::multimap<std::string, int> si_{{"A", 1}, {"B", 2}, {"B", 3}};
      std::multimap<std::string, int> sj_{{"A", 1}, {"B", 2}, {"B", 3}, {"B", 666}, {"C", 4}, {"C", 5}};
      std::multimap<std::string, int> sk_{{"A", 1}, {"B", 2}, {"B", 3}, {"C", 4}, {"C", 5}, {"C", 666}};
      std::multimap<std::string, int> sl_{{"A", 1}, {"D", 2}};
      std::multimap<std::string, int> sm_{{"A", 1}, {"D", 2}, {"D", 3}};
      testAssertMap<Equal>(sa_, sa_);
      testAssertMap<Equal>(sa_, sb_);
      testAssertMap<Equal>(sa_, sc_);
      testAssertMap<Equal>(sa_, sd_);
      testAssertMap<Equal>(sa_, se_);
      testAssertMap<Equal>(sa_, sf_);
      testAssertMap<Equal>(sa_, sg_);
      testAssertMap<Equal>(sa_, sh_);
      testAssertMap<Equal>(sa_, si_);
      testAssertMap<Equal>(sa_, sj_);
      testAssertMap<Equal>(sa_, sk_);
      testAssertMap<Equal>(sa_, sl_);
      testAssertMap<Equal>(sa_, sm_);

      /* -- empty maps */
      std::multimap<std::string, int> ea_;
      std::multimap<std::string, int> eb_{{"A", 1}};
      std::multimap<std::string, int> ec_{{"A", 1}, {"A", 2}};
      testAssertMap<Equal>(ea_, ea_);
      testAssertMap<Equal>(ea_, eb_);
      testAssertMap<Equal>(ea_, ec_);
      testAssertMap<Equal>(eb_, ea_);
      testAssertMap<Equal>(ec_, ea_);
    }
  }

  TEST_CASE(UnorderedMultiMapAssertions) {
    TEST_SIMPLE() {
      /* -- no subsequences */
      std::unordered_multimap<std::string, int> a_{{"A", 1}, {"B", 2}, {"C", 3}};
      std::unordered_multimap<std::string, int> b_{{"A", 1}, {"B", 2}};
      std::unordered_multimap<std::string, int> c_{{"A", 1}, {"B", 2}, {"C", 3}, {"D", 4}};
      std::unordered_multimap<std::string, int> d_{{"A", 1}, {"B", 666}, {"C", 3}};
      std::unordered_multimap<std::string, int> e_{{"A", 1}, {"B", 2}, {"C", 666}};
      testAssertMap<Equal>(a_, a_);
      testAssertMap<Equal>(a_, b_);
      testAssertMap<Equal>(a_, c_);
      testAssertMap<Equal>(a_, d_);
      testAssertMap<Equal>(a_, e_);

      /* -- note: subsequences are not supported as the unordered_multimap
       *    doesn't keep any defined order of keys in the subsequence. */

      /* -- empty maps */
      std::unordered_multimap<std::string, int> ea_;
      std::unordered_multimap<std::string, int> eb_{{"A", 1}};
      testAssertMap<Equal>(ea_, ea_);
      testAssertMap<Equal>(ea_, eb_);
      testAssertMap<Equal>(eb_, ea_);
    }
  }

  TEST_CASE(MixedAssertions) {
    TEST_SIMPLE() {
      std::map<std::string, int> a_{{"A", 1}, {"B", 2}, {"C", 3}};
      std::multimap<std::string, int> b_;
      std::unordered_map<std::string, int> c_{{"A", 1}, {"B", 2}};
      std::unordered_multimap<std::string, int> d_{{"A", 1}, {"B", 2}, {"C", 3}, {"D", 4}};
      std::multimap<std::string, int> e_{{"A", 1}, {"B", 666}, {"C", 3}};
      std::unordered_map<std::string, int> f_{{"A", 1}, {"B", 2}, {"C", 666}};
      std::multimap<std::string, int> g_{{"A", 1}, {"B", 2}, {"B", 666}, {"C", 3}};
      std::multimap<std::string, int> h_{{"A", 1}, {"B", 2}, {"C", 3}, {"C", 666}};

      testAssertMap<Equal>(a_, b_);
      testAssertMap<Equal>(a_, c_);
      testAssertMap<Equal>(a_, d_);
      testAssertMap<Equal>(a_, e_);
      testAssertMap<Equal>(a_, f_);
      testAssertMap<Equal>(a_, g_);
      testAssertMap<Equal>(a_, h_);

      testAssertMap<Equal>(b_, a_);
      testAssertMap<Equal>(c_, a_);
      testAssertMap<Equal>(d_, a_);
      testAssertMap<Equal>(e_, a_);
      testAssertMap<Equal>(f_, a_);
      testAssertMap<Equal>(g_, a_);
      testAssertMap<Equal>(h_, a_);
    }
  }
}

} /* -- namespace SelfTest */

} /* -- namespace OTest2 */
