/*
 * Copyright (C) 2019 Ondrej Starek
 *
 * This file is part of OTest2.
 *
 * OTest2 is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OTest2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OTest2.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <otest2/otest2.h>

#include <iostream>
#include <sstream>

#include <otest2/base64istream.h>
#include <otest2/base64ostream.h>
#include <otest2/difflogblock.h>
#include <otest2/hirschberg.h>
#include <otest2/testmark.h>
#include <otest2/testmarkbuilder.h>
#include <otest2/testmarkdiffprinter.h>
#include <otest2/testmarkfactory.h>
#include <otest2/testmarkinbinios.h>
#include <otest2/testmarkoutbinios.h>

namespace OTest2 {

namespace Test {

namespace {

typedef std::vector<const char*> Expected;

void printDiffResult(
    std::ostream& os_,
    const std::string& result_) {
  bool open_quote_(true);
  for(char c_ : result_) {
    if(open_quote_) {
      os_ << '"';
      open_quote_ = false;
    }
    switch(c_) {
      case '\n':
        os_ << "\",\n";
        open_quote_ = true;
        break;
      case '"':
        os_ << "\\\"";
        break;
      default:
        os_ << c_;
        break;
    }
  }
}

bool testDifference(
    TestMarkPtr mark1_,
    TestMarkPtr mark2_,
    const Expected& expected_) {
  /* -- compute the difference */
  std::vector<TestMark::LinearizedRecord> array1_;
  std::vector<TestMark::LinearizedRecord> array2_;
  DiffLogBlocks diff_log_;
  DiffLogBuilderBlock log_builder_(&diff_log_);
  mark1_->computeDiff(*mark2_, array1_, array2_, log_builder_);

  /* -- print the difference */
  std::ostringstream oss_;
  printTestMarkDiff(oss_, array1_, array2_, diff_log_, 3);

  /* -- print the expected */
  std::ostringstream exp_oss_;
  for(auto line_ : expected_)
    exp_oss_ << line_ << "\n";

  if(oss_.str() != exp_oss_.str()) {
    printDiffResult(std::cout, oss_.str());
    std::cout << " ---- " << std::endl;
    printDiffResult(std::cout, exp_oss_.str());
    return false;
  }
  else
    return true;
}

} /* -- namespace */

TEST_SUITE(TestMarks) {
  TEST_CASE(BasicTypes) {
    TEST_SIMPLE() {
      TestMarkBuilder builder_;

      /* -- null mark */
      builder_.appendNull();
      TestMarkPtr null1_mark_(builder_.stealMark());
      builder_.appendNull();
      TestMarkPtr null2_mark_(builder_.stealMark());

      /* -- strings */
      builder_.appendString("Value A");
      TestMarkPtr str1_mark_(builder_.stealMark());
      builder_.appendString("Value B");
      TestMarkPtr str2_mark_(builder_.stealMark());
      builder_.appendString("Value A");
      TestMarkPtr str3_mark_(builder_.stealMark());

      /* -- integers */
      builder_.appendInt(100);
      TestMarkPtr int1_mark_(builder_.stealMark());
      builder_.appendInt(200);
      TestMarkPtr int2_mark_(builder_.stealMark());
      builder_.appendInt(100);
      TestMarkPtr int3_mark_(builder_.stealMark());

      /* -- floats */
      builder_.appendFloat(5.3);
      TestMarkPtr fl1_mark_(builder_.stealMark());
      builder_.appendFloat(5.3 + 2.0 * DEFAULT_FLOAT_PRECISION);
      TestMarkPtr fl2_mark_(builder_.stealMark());
      builder_.appendFloat(5.3 + 0.5 * DEFAULT_FLOAT_PRECISION);
      TestMarkPtr fl3_mark_(builder_.stealMark());

      /* -- lists */
      builder_.openList();
      builder_.closeContainer();
      TestMarkPtr list1_mark_(builder_.stealMark());
      builder_.openList();
      builder_.closeContainer();
      TestMarkPtr list2_mark_(builder_.stealMark());
      builder_.openList();
      builder_.appendString("Item A");
      builder_.closeContainer();
      TestMarkPtr list3_mark_(builder_.stealMark());
      builder_.openList();
      builder_.appendString("Item A");
      builder_.closeContainer();
      TestMarkPtr list4_mark_(builder_.stealMark());
      builder_.openList();
      builder_.appendString("Item B");
      builder_.closeContainer();
      TestMarkPtr list5_mark_(builder_.stealMark());
      builder_.openList();
      builder_.appendString("Item A");
      builder_.appendString("Item B");
      builder_.closeContainer();
      TestMarkPtr list6_mark_(builder_.stealMark());
      builder_.openList("Prefix");
      builder_.appendString("Item A");
      builder_.appendString("Item B");
      builder_.closeContainer();
      TestMarkPtr list7_mark_(builder_.stealMark());
      builder_.openList("Prefix");
      builder_.appendString("Item A");
      builder_.appendString("Item B");
      builder_.closeContainer();
      TestMarkPtr list8_mark_(builder_.stealMark());

      /* -- maps */
      builder_.openMap();
      builder_.closeContainer();
      TestMarkPtr map1_mark_(builder_.stealMark());
      builder_.openMap();
      builder_.closeContainer();
      TestMarkPtr map2_mark_(builder_.stealMark());
      builder_.openMap();
      builder_.setKey("1");
      builder_.appendString("Item 1");
      builder_.closeContainer();
      TestMarkPtr map3_mark_(builder_.stealMark());
      builder_.openMap();
      builder_.setKey("1");
      builder_.appendString("Item 1");
      builder_.closeContainer();
      TestMarkPtr map4_mark_(builder_.stealMark());
      builder_.openMap("Prefix2");
      builder_.setKey("1");
      builder_.appendString("Item 1");
      builder_.closeContainer();
      TestMarkPtr map5_mark_(builder_.stealMark());
      builder_.openMap("Prefix2");
      builder_.setKey("1");
      builder_.appendString("Item 1");
      builder_.closeContainer();
      TestMarkPtr map6_mark_(builder_.stealMark());
      builder_.openMap();
      builder_.setKey("X");
      builder_.appendString("Item 1");
      builder_.closeContainer();
      TestMarkPtr map7_mark_(builder_.stealMark());
      builder_.openMap();
      builder_.setKey("1");
      builder_.appendString("Item X");
      builder_.closeContainer();
      TestMarkPtr map8_mark_(builder_.stealMark());
      builder_.openMap();
      builder_.setKey("1");
      builder_.appendString("Item 1");
      builder_.setKey("2");
      builder_.appendString("Item 2");
      builder_.closeContainer();
      TestMarkPtr map9_mark_(builder_.stealMark());

      /* -- equality */
      testAssert(null1_mark_->isEqual(*null1_mark_));
      testAssert(null1_mark_->isEqual(*null2_mark_));
      testAssert(!null1_mark_->isEqual(*str1_mark_));
      testAssert(!null1_mark_->isEqual(*int1_mark_));
      testAssert(!null1_mark_->isEqual(*fl1_mark_));
      testAssert(!null1_mark_->isEqual(*list1_mark_));
      testAssert(!null1_mark_->isEqual(*map1_mark_));

      testAssert(str1_mark_->isEqual(*str1_mark_));
      testAssert(!str1_mark_->isEqual(*str2_mark_));
      testAssert(str1_mark_->isEqual(*str3_mark_));
      testAssert(!str1_mark_->isEqual(*null1_mark_));
      testAssert(!str1_mark_->isEqual(*int1_mark_));
      testAssert(!str1_mark_->isEqual(*fl1_mark_));
      testAssert(!str1_mark_->isEqual(*list1_mark_));
      testAssert(!str1_mark_->isEqual(*map1_mark_));

      testAssert(int1_mark_->isEqual(*int1_mark_));
      testAssert(!int1_mark_->isEqual(*int2_mark_));
      testAssert(int1_mark_->isEqual(*int3_mark_));
      testAssert(!int1_mark_->isEqual(*null1_mark_));
      testAssert(!int1_mark_->isEqual(*str1_mark_));
      testAssert(!int1_mark_->isEqual(*fl1_mark_));
      testAssert(!int1_mark_->isEqual(*list1_mark_));
      testAssert(!int1_mark_->isEqual(*map1_mark_));

      testAssert(fl1_mark_->isEqual(*fl1_mark_));
      testAssert(!fl1_mark_->isEqual(*fl2_mark_));
      testAssert(fl1_mark_->isEqual(*fl3_mark_));
      testAssert(!fl1_mark_->isEqual(*null1_mark_));
      testAssert(!fl1_mark_->isEqual(*str1_mark_));
      testAssert(!fl1_mark_->isEqual(*int1_mark_));
      testAssert(!fl1_mark_->isEqual(*list1_mark_));
      testAssert(!fl1_mark_->isEqual(*map1_mark_));

      testAssert(list1_mark_->isEqual(*list1_mark_));
      testAssert(list1_mark_->isEqual(*list2_mark_));
      testAssert(!list1_mark_->isEqual(*list3_mark_));
      testAssert(list3_mark_->isEqual(*list3_mark_));
      testAssert(list3_mark_->isEqual(*list4_mark_));
      testAssert(!list3_mark_->isEqual(*list1_mark_));
      testAssert(!list3_mark_->isEqual(*list5_mark_));
      testAssert(!list3_mark_->isEqual(*list6_mark_));
      testAssert(!list6_mark_->isEqual(*list3_mark_));
      testAssert(!list6_mark_->isEqual(*list7_mark_));
      testAssert(list7_mark_->isEqual(*list7_mark_));
      testAssert(list7_mark_->isEqual(*list8_mark_));
      testAssert(!list7_mark_->isEqual(*list6_mark_));
      testAssert(!list1_mark_->isEqual(*null1_mark_));
      testAssert(!list1_mark_->isEqual(*str1_mark_));
      testAssert(!list1_mark_->isEqual(*int1_mark_));
      testAssert(!list1_mark_->isEqual(*fl1_mark_));
      testAssert(!list1_mark_->isEqual(*map1_mark_));

      testAssert(map1_mark_->isEqual(*map1_mark_));
      testAssert(map1_mark_->isEqual(*map2_mark_));
      testAssert(!map1_mark_->isEqual(*map3_mark_));
      testAssert(!map1_mark_->isEqual(*map5_mark_));
      testAssert(!map1_mark_->isEqual(*map7_mark_));
      testAssert(!map1_mark_->isEqual(*map8_mark_));
      testAssert(!map1_mark_->isEqual(*map9_mark_));
      testAssert(!map3_mark_->isEqual(*map1_mark_));
      testAssert(map3_mark_->isEqual(*map3_mark_));
      testAssert(map3_mark_->isEqual(*map4_mark_));
      testAssert(!map3_mark_->isEqual(*map5_mark_));
      testAssert(!map3_mark_->isEqual(*map7_mark_));
      testAssert(!map3_mark_->isEqual(*map8_mark_));
      testAssert(!map3_mark_->isEqual(*map9_mark_));
      testAssert(!map5_mark_->isEqual(*map1_mark_));
      testAssert(!map5_mark_->isEqual(*map3_mark_));
      testAssert(map5_mark_->isEqual(*map5_mark_));
      testAssert(map5_mark_->isEqual(*map6_mark_));
      testAssert(!map5_mark_->isEqual(*map7_mark_));
      testAssert(!map5_mark_->isEqual(*map8_mark_));
      testAssert(!map5_mark_->isEqual(*map9_mark_));
      testAssert(!map7_mark_->isEqual(*map1_mark_));
      testAssert(!map7_mark_->isEqual(*map3_mark_));
      testAssert(!map7_mark_->isEqual(*map5_mark_));
      testAssert(map7_mark_->isEqual(*map7_mark_));
      testAssert(!map7_mark_->isEqual(*map8_mark_));
      testAssert(!map7_mark_->isEqual(*map9_mark_));
      testAssert(!map8_mark_->isEqual(*map1_mark_));
      testAssert(!map8_mark_->isEqual(*map3_mark_));
      testAssert(!map8_mark_->isEqual(*map5_mark_));
      testAssert(!map8_mark_->isEqual(*map7_mark_));
      testAssert(map8_mark_->isEqual(*map8_mark_));
      testAssert(!map8_mark_->isEqual(*map9_mark_));
      testAssert(!map9_mark_->isEqual(*map1_mark_));
      testAssert(!map9_mark_->isEqual(*map3_mark_));
      testAssert(!map9_mark_->isEqual(*map5_mark_));
      testAssert(!map9_mark_->isEqual(*map7_mark_));
      testAssert(!map9_mark_->isEqual(*map8_mark_));
      testAssert(map9_mark_->isEqual(*map9_mark_));
      testAssert(!map1_mark_->isEqual(*null1_mark_));
      testAssert(!map1_mark_->isEqual(*str1_mark_));
      testAssert(!map1_mark_->isEqual(*int1_mark_));
      testAssert(!map1_mark_->isEqual(*fl1_mark_));
      testAssert(!map1_mark_->isEqual(*list1_mark_));

      /* -- value equality */
      testAssert(null1_mark_->isEqualValue(*null1_mark_));
      testAssert(null1_mark_->isEqualValue(*null2_mark_));
      testAssert(!null1_mark_->isEqualValue(*str1_mark_));
      testAssert(!null1_mark_->isEqualValue(*int1_mark_));
      testAssert(!null1_mark_->isEqualValue(*fl1_mark_));
      testAssert(!null1_mark_->isEqualValue(*list1_mark_));
      testAssert(!null1_mark_->isEqualValue(*map1_mark_));

      testAssert(str1_mark_->isEqualValue(*str1_mark_));
      testAssert(!str1_mark_->isEqualValue(*str2_mark_));
      testAssert(str1_mark_->isEqualValue(*str3_mark_));
      testAssert(!str1_mark_->isEqualValue(*null1_mark_));
      testAssert(!str1_mark_->isEqualValue(*int1_mark_));
      testAssert(!str1_mark_->isEqualValue(*fl1_mark_));
      testAssert(!str1_mark_->isEqualValue(*list1_mark_));
      testAssert(!str1_mark_->isEqualValue(*map1_mark_));

      testAssert(int1_mark_->isEqualValue(*int1_mark_));
      testAssert(!int1_mark_->isEqualValue(*int2_mark_));
      testAssert(int1_mark_->isEqualValue(*int3_mark_));
      testAssert(!int1_mark_->isEqualValue(*null1_mark_));
      testAssert(!int1_mark_->isEqualValue(*str1_mark_));
      testAssert(!int1_mark_->isEqualValue(*fl1_mark_));
      testAssert(!int1_mark_->isEqualValue(*list1_mark_));
      testAssert(!int1_mark_->isEqualValue(*map1_mark_));

      testAssert(fl1_mark_->isEqualValue(*fl1_mark_));
      testAssert(!fl1_mark_->isEqualValue(*fl2_mark_));
      testAssert(fl1_mark_->isEqualValue(*fl3_mark_));
      testAssert(!fl1_mark_->isEqualValue(*null1_mark_));
      testAssert(!fl1_mark_->isEqualValue(*str1_mark_));
      testAssert(!fl1_mark_->isEqualValue(*int1_mark_));
      testAssert(!fl1_mark_->isEqualValue(*list1_mark_));
      testAssert(!fl1_mark_->isEqualValue(*map1_mark_));

      testAssert(list1_mark_->isEqualValue(*list1_mark_));
      testAssert(list1_mark_->isEqualValue(*list3_mark_));
      testAssert(list1_mark_->isEqualValue(*list5_mark_));
      testAssert(list1_mark_->isEqualValue(*list6_mark_));
      testAssert(!list1_mark_->isEqualValue(*list7_mark_));
      testAssert(list3_mark_->isEqualValue(*list1_mark_));
      testAssert(list3_mark_->isEqualValue(*list3_mark_));
      testAssert(list3_mark_->isEqualValue(*list5_mark_));
      testAssert(list3_mark_->isEqualValue(*list6_mark_));
      testAssert(!list3_mark_->isEqualValue(*list7_mark_));
      testAssert(list5_mark_->isEqualValue(*list1_mark_));
      testAssert(list5_mark_->isEqualValue(*list3_mark_));
      testAssert(list5_mark_->isEqualValue(*list5_mark_));
      testAssert(list5_mark_->isEqualValue(*list6_mark_));
      testAssert(!list5_mark_->isEqualValue(*list7_mark_));
      testAssert(list6_mark_->isEqualValue(*list1_mark_));
      testAssert(list6_mark_->isEqualValue(*list3_mark_));
      testAssert(list6_mark_->isEqualValue(*list5_mark_));
      testAssert(list6_mark_->isEqualValue(*list6_mark_));
      testAssert(!list6_mark_->isEqualValue(*list7_mark_));
      testAssert(!list7_mark_->isEqualValue(*list1_mark_));
      testAssert(!list7_mark_->isEqualValue(*list3_mark_));
      testAssert(!list7_mark_->isEqualValue(*list5_mark_));
      testAssert(!list7_mark_->isEqualValue(*list6_mark_));
      testAssert(list7_mark_->isEqualValue(*list7_mark_));
      testAssert(!list1_mark_->isEqualValue(*null1_mark_));
      testAssert(!list1_mark_->isEqualValue(*str1_mark_));
      testAssert(!list1_mark_->isEqualValue(*int1_mark_));
      testAssert(!list1_mark_->isEqualValue(*fl1_mark_));
      testAssert(!list1_mark_->isEqualValue(*map1_mark_));

      testAssert(map1_mark_->isEqualValue(*map1_mark_));
      testAssert(map1_mark_->isEqualValue(*map3_mark_));
      testAssert(!map1_mark_->isEqualValue(*map5_mark_));
      testAssert(map1_mark_->isEqualValue(*map7_mark_));
      testAssert(map1_mark_->isEqualValue(*map8_mark_));
      testAssert(map1_mark_->isEqualValue(*map9_mark_));
      testAssert(map3_mark_->isEqualValue(*map1_mark_));
      testAssert(map3_mark_->isEqualValue(*map3_mark_));
      testAssert(!map3_mark_->isEqualValue(*map5_mark_));
      testAssert(map3_mark_->isEqualValue(*map7_mark_));
      testAssert(map3_mark_->isEqualValue(*map8_mark_));
      testAssert(map3_mark_->isEqualValue(*map9_mark_));
      testAssert(!map5_mark_->isEqualValue(*map1_mark_));
      testAssert(!map5_mark_->isEqualValue(*map3_mark_));
      testAssert(map5_mark_->isEqualValue(*map5_mark_));
      testAssert(!map5_mark_->isEqualValue(*map7_mark_));
      testAssert(!map5_mark_->isEqualValue(*map8_mark_));
      testAssert(!map5_mark_->isEqualValue(*map9_mark_));
      testAssert(map7_mark_->isEqualValue(*map1_mark_));
      testAssert(map7_mark_->isEqualValue(*map3_mark_));
      testAssert(!map7_mark_->isEqualValue(*map5_mark_));
      testAssert(map7_mark_->isEqualValue(*map7_mark_));
      testAssert(map7_mark_->isEqualValue(*map8_mark_));
      testAssert(map7_mark_->isEqualValue(*map9_mark_));
      testAssert(map8_mark_->isEqualValue(*map1_mark_));
      testAssert(map8_mark_->isEqualValue(*map3_mark_));
      testAssert(!map8_mark_->isEqualValue(*map5_mark_));
      testAssert(map8_mark_->isEqualValue(*map7_mark_));
      testAssert(map8_mark_->isEqualValue(*map8_mark_));
      testAssert(map8_mark_->isEqualValue(*map9_mark_));
      testAssert(map9_mark_->isEqualValue(*map1_mark_));
      testAssert(map9_mark_->isEqualValue(*map3_mark_));
      testAssert(!map9_mark_->isEqualValue(*map5_mark_));
      testAssert(map9_mark_->isEqualValue(*map7_mark_));
      testAssert(map9_mark_->isEqualValue(*map8_mark_));
      testAssert(map9_mark_->isEqualValue(*map9_mark_));
      testAssert(!map1_mark_->isEqualValue(*null1_mark_));
      testAssert(!map1_mark_->isEqualValue(*str1_mark_));
      testAssert(!map1_mark_->isEqualValue(*int1_mark_));
      testAssert(!map1_mark_->isEqualValue(*fl1_mark_));
      testAssert(!map1_mark_->isEqualValue(*list1_mark_));
    }
  }

  TEST_CASE(Printing) {
    TEST_SIMPLE() {
      TestMarkBuilder builder_;

      builder_.openList("root");
      builder_.openMap();
      builder_.setKey("null");
      builder_.appendNull();
      builder_.setKey("string");
      builder_.appendString("Value A");
      builder_.setKey("int");
      builder_.appendInt(-2983);
      builder_.setKey("float");
      builder_.appendFloat(3.141529);
      builder_.setKey("list");
      builder_.openList();
      builder_.appendString("inner value");
      builder_.appendBool(true);
      builder_.appendBool(false);
      builder_.closeContainer();
      builder_.closeContainer();
      builder_.closeContainer();
      builder_.stealMark()->printMark(std::cout, "*  ");
    }
  }

  TEST_CASE(Difference) {
    TEST_SIMPLE() {
      TestMarkBuilder builder_;

      builder_.openList();
      builder_.closeContainer();
      TestMarkPtr mark1_(builder_.stealMark());
      builder_.openList();
      builder_.appendString("Value A");
      builder_.closeContainer();
      TestMarkPtr mark2_(builder_.stealMark());

      /* -- both input sequences are empty */
      testAssert(testDifference(mark1_, mark1_, Expected{}));
      /* -- one sequence is empty: the second one is the full change */
      testAssert(testDifference(mark1_, mark2_, Expected{
        "  [",
        "-   \"Value A\"",
        "  ]",
      }));
      testAssert(testDifference(mark2_, mark1_, Expected{
        "  [",
        "+   \"Value A\"",
        "  ]",
      }));
      /* -- both sequences are the same */
      testAssert(testDifference(mark2_, mark2_, Expected{}));

      /* -- change in a list */
      builder_.openList();
      builder_.appendString("Value B");
      builder_.closeContainer();
      TestMarkPtr mark3_(builder_.stealMark());
      builder_.openList();
      builder_.appendString("Value B");
      builder_.appendString("Value A");
      builder_.closeContainer();
      TestMarkPtr mark4_(builder_.stealMark());
      testAssert(testDifference(mark2_, mark3_, Expected{
        "  [",
        "-   \"Value B\"",
        "+   \"Value A\"",
        "  ]",
      }));
      testAssert(testDifference(mark3_, mark2_, Expected{
        "  [",
        "-   \"Value A\"",
        "+   \"Value B\"",
        "  ]",
      }));
      testAssert(testDifference(mark2_, mark4_, Expected{
        "  [",
        "-   \"Value B\"",
        "    \"Value A\"",
        "  ]",
      }));
      testAssert(testDifference(mark4_, mark2_, Expected{
        "  [",
        "+   \"Value B\"",
        "    \"Value A\"",
        "  ]",
      }));

      /* -- gap in context */
      builder_.openList();
      builder_.appendString("Value 01");
      builder_.appendString("Value 02");
      builder_.appendString("Value 03");
      builder_.appendString("Value 04");
      builder_.appendString("Value 05");
      builder_.appendString("Value 06");
      builder_.appendString("Value 07");
      builder_.appendString("Value 08");
      builder_.appendString("Value 09");
      builder_.appendString("Value 10");
      builder_.appendString("Value 11");
      builder_.appendString("Value 12");
      builder_.appendString("Value 13");
      builder_.appendString("Value 14");
      builder_.appendString("Value 15");
      builder_.appendString("Value 16");
      builder_.appendString("Value 17");
      builder_.closeContainer();
      TestMarkPtr mark5_(builder_.stealMark());
      builder_.openList();
      builder_.appendString("Value 01");
      builder_.appendString("Value 02");
      builder_.appendString("Value 03");
      builder_.appendString("Value 04");
      builder_.appendString("Insert 1");
      builder_.appendString("Insert 2");
      builder_.appendString("Insert 3");
      builder_.appendString("Value 05");
      builder_.appendString("Value 06");
      builder_.appendString("Value 07");
      builder_.appendString("Value 08");
      builder_.appendString("Value 09");
      builder_.appendString("Value 10");
      builder_.appendString("Value 11");
      builder_.appendString("Value 14");
      builder_.appendString("Value 15");
      builder_.appendString("Value 16");
      builder_.appendString("Value 17");
      builder_.closeContainer();
      TestMarkPtr mark6_(builder_.stealMark());
      testAssert(testDifference(mark6_, mark5_, Expected{
        "  ......... ",
        "    \"Value 02\"",
        "    \"Value 03\"",
        "    \"Value 04\"",
        "+   \"Insert 1\"",
        "+   \"Insert 2\"",
        "+   \"Insert 3\"",
        "    \"Value 05\"",
        "    \"Value 06\"",
        "    \"Value 07\"",
        "  ......... ",
        "    \"Value 09\"",
        "    \"Value 10\"",
        "    \"Value 11\"",
        "-   \"Value 12\"",
        "-   \"Value 13\"",
        "    \"Value 14\"",
        "    \"Value 15\"",
        "    \"Value 16\"",
        "  ......... ",
      }));
      testAssert(testDifference(mark5_, mark6_, Expected{
        "  ......... ",
        "    \"Value 02\"",
        "    \"Value 03\"",
        "    \"Value 04\"",
        "-   \"Insert 1\"",
        "-   \"Insert 2\"",
        "-   \"Insert 3\"",
        "    \"Value 05\"",
        "    \"Value 06\"",
        "    \"Value 07\"",
        "  ......... ",
        "    \"Value 09\"",
        "    \"Value 10\"",
        "    \"Value 11\"",
        "+   \"Value 12\"",
        "+   \"Value 13\"",
        "    \"Value 14\"",
        "    \"Value 15\"",
        "    \"Value 16\"",
        "  ......... ",
      }));

      /* -- too short gaps */
      builder_.openList();
      builder_.appendString("Value 01");
      builder_.appendString("Value 02");
      builder_.appendString("Value 03");
      builder_.appendString("Value 04");
      builder_.appendString("Value 05");
      builder_.appendString("Value 06");
      builder_.appendString("Value 07");
      builder_.appendString("Value 08");
      builder_.appendString("Value 09");
      builder_.appendString("Value 10");
      builder_.appendString("Value 11");
      builder_.appendString("Value 12");
      builder_.appendString("Value 13");
      builder_.appendString("Value 14");
      builder_.closeContainer();
      TestMarkPtr mark7_(builder_.stealMark());
      builder_.openList();
      builder_.appendString("Value 01");
      builder_.appendString("Value 02");
      builder_.appendString("Value AA");
      builder_.appendString("Value AB");
      builder_.appendString("Value 06");
      builder_.appendString("Value 07");
      builder_.appendString("Value 08");
      builder_.appendString("Value 09");
      builder_.appendString("Value 10");
      builder_.appendString("Value DD");
      builder_.appendString("Value EE");
      builder_.appendString("Value FF");
      builder_.appendString("Value 13");
      builder_.appendString("Value 14");
      builder_.closeContainer();
      TestMarkPtr mark8_(builder_.stealMark());
      testAssert(testDifference(mark7_, mark8_, Expected{
        "  [",
        "    \"Value 01\"",
        "    \"Value 02\"",
        "-   \"Value AA\"",
        "-   \"Value AB\"",
        "+   \"Value 03\"",
        "+   \"Value 04\"",
        "+   \"Value 05\"",
        "    \"Value 06\"",
        "    \"Value 07\"",
        "    \"Value 08\"",
        "    \"Value 09\"",
        "    \"Value 10\"",
        "-   \"Value DD\"",
        "-   \"Value EE\"",
        "-   \"Value FF\"",
        "+   \"Value 11\"",
        "+   \"Value 12\"",
        "    \"Value 13\"",
        "    \"Value 14\"",
        "  ]",
      }));
      testAssert(testDifference(mark8_, mark7_, Expected{
        "  [",
        "    \"Value 01\"",
        "    \"Value 02\"",
        "-   \"Value 03\"",
        "-   \"Value 04\"",
        "-   \"Value 05\"",
        "+   \"Value AA\"",
        "+   \"Value AB\"",
        "    \"Value 06\"",
        "    \"Value 07\"",
        "    \"Value 08\"",
        "    \"Value 09\"",
        "    \"Value 10\"",
        "-   \"Value 11\"",
        "-   \"Value 12\"",
        "+   \"Value DD\"",
        "+   \"Value EE\"",
        "+   \"Value FF\"",
        "    \"Value 13\"",
        "    \"Value 14\"",
        "  ]",
      }));

      /* -- more real example */
      builder_.openList("Uris");
        builder_.openMap("Source");
        builder_.setKey("type");
        builder_.appendString("live");
        builder_.setKey("codec");
        builder_.appendString("h264");
        builder_.setKey("protocol");
        builder_.appendString("hls");
        builder_.setKey("uri");
        builder_.appendString("http://hls01/playlist.m3u8");
        builder_.setKey("drm");
        builder_.appendString("widevine");
        builder_.closeContainer();

        builder_.openMap("Source");
        builder_.setKey("type");
        builder_.appendString("live");
        builder_.setKey("codec");
        builder_.appendString("h264");
        builder_.setKey("protocol");
        builder_.appendString("hls");
        builder_.setKey("uri");
        builder_.appendString("http://hls02/playlist.m3u8");
        builder_.setKey("drm");
        builder_.appendString("widevine");
        builder_.closeContainer();
      builder_.closeContainer();
      TestMarkPtr mark9_(builder_.stealMark());

      builder_.openList("Uris");
        builder_.openMap("Source");
        builder_.setKey("type");
        builder_.appendString("live");
        builder_.setKey("codec");
        builder_.appendString("h264");
        builder_.setKey("protocol");
        builder_.appendString("hls");
        builder_.setKey("uri");
        builder_.appendString("http://hls01/playlist.m3u8");
        builder_.setKey("drm");
        builder_.appendString("widevine");
        builder_.closeContainer();

        builder_.openMap("Source");
        builder_.setKey("type");
        builder_.appendString("live");
        builder_.setKey("codec");
        builder_.appendString("h264");
        builder_.setKey("protocol");
        builder_.appendString("hls");
        builder_.setKey("uri");
        builder_.appendString("http://hls03/playlist.m3u8");
        builder_.setKey("drm");
        builder_.appendString("widevine");
        builder_.closeContainer();

        builder_.openMap("Source");
        builder_.setKey("type");
        builder_.appendString("live");
        builder_.setKey("codec");
        builder_.appendString("h264");
        builder_.setKey("protocol");
        builder_.appendString("hls");
        builder_.setKey("uri");
        builder_.appendString("http://hls02/playlist.m3u8");
        builder_.setKey("drm");
        builder_.appendString("widevine");
        builder_.closeContainer();
      builder_.closeContainer();
      TestMarkPtr mark10_(builder_.stealMark());

      testAssert(testDifference(mark10_, mark9_, Expected{
        "  ......... ",
        "      protocol: \"hls\"",
        "      type: \"live\"",
        "      uri: \"http://hls01/playlist.m3u8\"",
        "+   Source {",
        "+     codec: \"h264\"",
        "+     drm: \"widevine\"",
        "+     protocol: \"hls\"",
        "+     type: \"live\"",
        "+     uri: \"http://hls03/playlist.m3u8\"",
        "+   }",
        "    Source {",
        "      codec: \"h264\"",
        "      drm: \"widevine\"",
        "  ......... ",
      }));
    }
  }

  TEST_CASE(Serialization) {
    TEST_SIMPLE() {
      TestMarkBuilder builder_;
      builder_.openList("root");
      builder_.openMap();
      builder_.setKey("null");
      builder_.appendNull();
      builder_.setKey("string");
      builder_.appendString("Value A");
      builder_.setKey("int");
      builder_.appendInt(-2983);
      builder_.setKey("float");
      builder_.appendFloat(3.141529);
      builder_.setKey("list");
      builder_.openList();
      builder_.appendString("inner value");
      builder_.appendBool(true);
      builder_.appendBool(false);
      builder_.closeContainer();
      builder_.closeContainer();
      builder_.closeContainer();

      /* -- serialize the mark */
      TestMarkPtr source_(builder_.stealMark());
      std::ostringstream oss_;
      {
        Base64OStream bos_(&oss_);
        TestMarkOutBinIOS tmobi_(&bos_);
        source_->serializeMark(tmobi_);
      }

      /* -- deserialize the mark again */
      std::istringstream iss_(oss_.str());
      Base64IStream bis_(&iss_);
      TestMarkInBinIOS tmibi_(&bis_);
      TestMarkFactory factory_;
      TestMarkPtr target_(TestMarkInBinIOS::deserialize(factory_, tmibi_));

      testAssert(source_->isEqual(*target_));
    }
  }
}

} /* -- namespace Test */

} /* -- namespace OTest2 */
