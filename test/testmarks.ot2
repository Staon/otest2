/*
 * Copyright (C) 2019 Ondrej Starek
 *
 * This file is part of OTest2.
 *
 * OTest2 is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OTest2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OTest2.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <otest2/otest2.h>

#include <otest2/testmark.h>
#include <otest2/testmarkbuilder.h>

namespace OTest2 {

namespace Test {

TEST_SUITE(TestMarks) {
  TEST_CASE(BasicTypes) {
    TEST_SIMPLE() {
      TestMarkBuilder builder_;

      /* -- null mark */
      builder_.appendNull();
      TestMarkPtr null1_mark_(builder_.stealMark());
      builder_.appendNull();
      TestMarkPtr null2_mark_(builder_.stealMark());

      /* -- strings */
      builder_.appendString("Value A");
      TestMarkPtr str1_mark_(builder_.stealMark());
      builder_.appendString("Value B");
      TestMarkPtr str2_mark_(builder_.stealMark());
      builder_.appendString("Value A");
      TestMarkPtr str3_mark_(builder_.stealMark());

      /* -- integers */
      builder_.appendInt(100);
      TestMarkPtr int1_mark_(builder_.stealMark());
      builder_.appendInt(200);
      TestMarkPtr int2_mark_(builder_.stealMark());
      builder_.appendInt(100);
      TestMarkPtr int3_mark_(builder_.stealMark());

      /* -- floats */
      builder_.appendFloat(5.3);
      TestMarkPtr fl1_mark_(builder_.stealMark());
      builder_.appendFloat(5.3 + 2.0 * DEFAULT_FLOAT_PRECISION);
      TestMarkPtr fl2_mark_(builder_.stealMark());
      builder_.appendFloat(5.3 + 0.5 * DEFAULT_FLOAT_PRECISION);
      TestMarkPtr fl3_mark_(builder_.stealMark());

      /* -- lists */
      builder_.openList();
      builder_.closeContainer();
      TestMarkPtr list1_mark_(builder_.stealMark());
      builder_.openList();
      builder_.closeContainer();
      TestMarkPtr list2_mark_(builder_.stealMark());
      builder_.openList();
      builder_.appendString("Item A");
      builder_.closeContainer();
      TestMarkPtr list3_mark_(builder_.stealMark());
      builder_.openList();
      builder_.appendString("Item A");
      builder_.closeContainer();
      TestMarkPtr list4_mark_(builder_.stealMark());
      builder_.openList();
      builder_.appendString("Item B");
      builder_.closeContainer();
      TestMarkPtr list5_mark_(builder_.stealMark());
      builder_.openList();
      builder_.appendString("Item A");
      builder_.appendString("Item B");
      builder_.closeContainer();
      TestMarkPtr list6_mark_(builder_.stealMark());
      builder_.openList("Prefix");
      builder_.appendString("Item A");
      builder_.appendString("Item B");
      builder_.closeContainer();
      TestMarkPtr list7_mark_(builder_.stealMark());
      builder_.openList("Prefix");
      builder_.appendString("Item A");
      builder_.appendString("Item B");
      builder_.closeContainer();
      TestMarkPtr list8_mark_(builder_.stealMark());

      /* -- maps */
      builder_.openMap();
      builder_.closeContainer();
      TestMarkPtr map1_mark_(builder_.stealMark());
      builder_.openMap();
      builder_.closeContainer();
      TestMarkPtr map2_mark_(builder_.stealMark());
      builder_.openMap();
      builder_.setKey("1");
      builder_.appendString("Item 1");
      builder_.closeContainer();
      TestMarkPtr map3_mark_(builder_.stealMark());
      builder_.openMap();
      builder_.setKey("1");
      builder_.appendString("Item 1");
      builder_.closeContainer();
      TestMarkPtr map4_mark_(builder_.stealMark());
      builder_.openMap("Prefix2");
      builder_.setKey("1");
      builder_.appendString("Item 1");
      builder_.closeContainer();
      TestMarkPtr map5_mark_(builder_.stealMark());
      builder_.openMap("Prefix2");
      builder_.setKey("1");
      builder_.appendString("Item 1");
      builder_.closeContainer();
      TestMarkPtr map6_mark_(builder_.stealMark());
      builder_.openMap();
      builder_.setKey("X");
      builder_.appendString("Item 1");
      builder_.closeContainer();
      TestMarkPtr map7_mark_(builder_.stealMark());
      builder_.openMap();
      builder_.setKey("1");
      builder_.appendString("Item X");
      builder_.closeContainer();
      TestMarkPtr map8_mark_(builder_.stealMark());
      builder_.openMap();
      builder_.setKey("1");
      builder_.appendString("Item 1");
      builder_.setKey("2");
      builder_.appendString("Item 2");
      builder_.closeContainer();
      TestMarkPtr map9_mark_(builder_.stealMark());

      /* -- equality */
      testAssert(null1_mark_->isEqual(*null1_mark_));
      testAssert(null1_mark_->isEqual(*null2_mark_));
      testAssert(!null1_mark_->isEqual(*str1_mark_));
      testAssert(!null1_mark_->isEqual(*int1_mark_));
      testAssert(!null1_mark_->isEqual(*fl1_mark_));
      testAssert(!null1_mark_->isEqual(*list1_mark_));
      testAssert(!null1_mark_->isEqual(*map1_mark_));

      testAssert(str1_mark_->isEqual(*str1_mark_));
      testAssert(!str1_mark_->isEqual(*str2_mark_));
      testAssert(str1_mark_->isEqual(*str3_mark_));
      testAssert(!str1_mark_->isEqual(*null1_mark_));
      testAssert(!str1_mark_->isEqual(*int1_mark_));
      testAssert(!str1_mark_->isEqual(*fl1_mark_));
      testAssert(!str1_mark_->isEqual(*list1_mark_));
      testAssert(!str1_mark_->isEqual(*map1_mark_));

      testAssert(int1_mark_->isEqual(*int1_mark_));
      testAssert(!int1_mark_->isEqual(*int2_mark_));
      testAssert(int1_mark_->isEqual(*int3_mark_));
      testAssert(!int1_mark_->isEqual(*null1_mark_));
      testAssert(!int1_mark_->isEqual(*str1_mark_));
      testAssert(!int1_mark_->isEqual(*fl1_mark_));
      testAssert(!int1_mark_->isEqual(*list1_mark_));
      testAssert(!int1_mark_->isEqual(*map1_mark_));

      testAssert(fl1_mark_->isEqual(*fl1_mark_));
      testAssert(!fl1_mark_->isEqual(*fl2_mark_));
      testAssert(fl1_mark_->isEqual(*fl3_mark_));
      testAssert(!fl1_mark_->isEqual(*null1_mark_));
      testAssert(!fl1_mark_->isEqual(*str1_mark_));
      testAssert(!fl1_mark_->isEqual(*int1_mark_));
      testAssert(!fl1_mark_->isEqual(*list1_mark_));
      testAssert(!fl1_mark_->isEqual(*map1_mark_));

      testAssert(list1_mark_->isEqual(*list1_mark_));
      testAssert(list1_mark_->isEqual(*list2_mark_));
      testAssert(!list1_mark_->isEqual(*list3_mark_));
      testAssert(list3_mark_->isEqual(*list3_mark_));
      testAssert(list3_mark_->isEqual(*list4_mark_));
      testAssert(!list3_mark_->isEqual(*list1_mark_));
      testAssert(!list3_mark_->isEqual(*list5_mark_));
      testAssert(!list3_mark_->isEqual(*list6_mark_));
      testAssert(!list6_mark_->isEqual(*list3_mark_));
      testAssert(!list6_mark_->isEqual(*list7_mark_));
      testAssert(list7_mark_->isEqual(*list7_mark_));
      testAssert(list7_mark_->isEqual(*list8_mark_));
      testAssert(!list7_mark_->isEqual(*list6_mark_));
      testAssert(!list1_mark_->isEqual(*null1_mark_));
      testAssert(!list1_mark_->isEqual(*str1_mark_));
      testAssert(!list1_mark_->isEqual(*int1_mark_));
      testAssert(!list1_mark_->isEqual(*fl1_mark_));
      testAssert(!list1_mark_->isEqual(*map1_mark_));

      testAssert(map1_mark_->isEqual(*map1_mark_));
      testAssert(map1_mark_->isEqual(*map2_mark_));
      testAssert(!map1_mark_->isEqual(*map3_mark_));
      testAssert(!map1_mark_->isEqual(*map5_mark_));
      testAssert(!map1_mark_->isEqual(*map7_mark_));
      testAssert(!map1_mark_->isEqual(*map8_mark_));
      testAssert(!map1_mark_->isEqual(*map9_mark_));
      testAssert(!map3_mark_->isEqual(*map1_mark_));
      testAssert(map3_mark_->isEqual(*map3_mark_));
      testAssert(map3_mark_->isEqual(*map4_mark_));
      testAssert(!map3_mark_->isEqual(*map5_mark_));
      testAssert(!map3_mark_->isEqual(*map7_mark_));
      testAssert(!map3_mark_->isEqual(*map8_mark_));
      testAssert(!map3_mark_->isEqual(*map9_mark_));
      testAssert(!map5_mark_->isEqual(*map1_mark_));
      testAssert(!map5_mark_->isEqual(*map3_mark_));
      testAssert(map5_mark_->isEqual(*map5_mark_));
      testAssert(map5_mark_->isEqual(*map6_mark_));
      testAssert(!map5_mark_->isEqual(*map7_mark_));
      testAssert(!map5_mark_->isEqual(*map8_mark_));
      testAssert(!map5_mark_->isEqual(*map9_mark_));
      testAssert(!map7_mark_->isEqual(*map1_mark_));
      testAssert(!map7_mark_->isEqual(*map3_mark_));
      testAssert(!map7_mark_->isEqual(*map5_mark_));
      testAssert(map7_mark_->isEqual(*map7_mark_));
      testAssert(!map7_mark_->isEqual(*map8_mark_));
      testAssert(!map7_mark_->isEqual(*map9_mark_));
      testAssert(!map8_mark_->isEqual(*map1_mark_));
      testAssert(!map8_mark_->isEqual(*map3_mark_));
      testAssert(!map8_mark_->isEqual(*map5_mark_));
      testAssert(!map8_mark_->isEqual(*map7_mark_));
      testAssert(map8_mark_->isEqual(*map8_mark_));
      testAssert(!map8_mark_->isEqual(*map9_mark_));
      testAssert(!map9_mark_->isEqual(*map1_mark_));
      testAssert(!map9_mark_->isEqual(*map3_mark_));
      testAssert(!map9_mark_->isEqual(*map5_mark_));
      testAssert(!map9_mark_->isEqual(*map7_mark_));
      testAssert(!map9_mark_->isEqual(*map8_mark_));
      testAssert(map9_mark_->isEqual(*map9_mark_));
      testAssert(!map1_mark_->isEqual(*null1_mark_));
      testAssert(!map1_mark_->isEqual(*str1_mark_));
      testAssert(!map1_mark_->isEqual(*int1_mark_));
      testAssert(!map1_mark_->isEqual(*fl1_mark_));
      testAssert(!map1_mark_->isEqual(*list1_mark_));

      /* -- value equality */
      testAssert(null1_mark_->isEqualValue(*null1_mark_));
      testAssert(null1_mark_->isEqualValue(*null2_mark_));
      testAssert(!null1_mark_->isEqualValue(*str1_mark_));
      testAssert(!null1_mark_->isEqualValue(*int1_mark_));
      testAssert(!null1_mark_->isEqualValue(*fl1_mark_));
      testAssert(!null1_mark_->isEqualValue(*list1_mark_));
      testAssert(!null1_mark_->isEqualValue(*map1_mark_));

      testAssert(str1_mark_->isEqualValue(*str1_mark_));
      testAssert(!str1_mark_->isEqualValue(*str2_mark_));
      testAssert(str1_mark_->isEqualValue(*str3_mark_));
      testAssert(!str1_mark_->isEqualValue(*null1_mark_));
      testAssert(!str1_mark_->isEqualValue(*int1_mark_));
      testAssert(!str1_mark_->isEqualValue(*fl1_mark_));
      testAssert(!str1_mark_->isEqualValue(*list1_mark_));
      testAssert(!str1_mark_->isEqualValue(*map1_mark_));

      testAssert(int1_mark_->isEqualValue(*int1_mark_));
      testAssert(!int1_mark_->isEqualValue(*int2_mark_));
      testAssert(int1_mark_->isEqualValue(*int3_mark_));
      testAssert(!int1_mark_->isEqualValue(*null1_mark_));
      testAssert(!int1_mark_->isEqualValue(*str1_mark_));
      testAssert(!int1_mark_->isEqualValue(*fl1_mark_));
      testAssert(!int1_mark_->isEqualValue(*list1_mark_));
      testAssert(!int1_mark_->isEqualValue(*map1_mark_));

      testAssert(fl1_mark_->isEqualValue(*fl1_mark_));
      testAssert(!fl1_mark_->isEqualValue(*fl2_mark_));
      testAssert(fl1_mark_->isEqualValue(*fl3_mark_));
      testAssert(!fl1_mark_->isEqualValue(*null1_mark_));
      testAssert(!fl1_mark_->isEqualValue(*str1_mark_));
      testAssert(!fl1_mark_->isEqualValue(*int1_mark_));
      testAssert(!fl1_mark_->isEqualValue(*list1_mark_));
      testAssert(!fl1_mark_->isEqualValue(*map1_mark_));

      testAssert(list1_mark_->isEqualValue(*list1_mark_));
      testAssert(list1_mark_->isEqualValue(*list3_mark_));
      testAssert(list1_mark_->isEqualValue(*list5_mark_));
      testAssert(list1_mark_->isEqualValue(*list6_mark_));
      testAssert(!list1_mark_->isEqualValue(*list7_mark_));
      testAssert(list3_mark_->isEqualValue(*list1_mark_));
      testAssert(list3_mark_->isEqualValue(*list3_mark_));
      testAssert(list3_mark_->isEqualValue(*list5_mark_));
      testAssert(list3_mark_->isEqualValue(*list6_mark_));
      testAssert(!list3_mark_->isEqualValue(*list7_mark_));
      testAssert(list5_mark_->isEqualValue(*list1_mark_));
      testAssert(list5_mark_->isEqualValue(*list3_mark_));
      testAssert(list5_mark_->isEqualValue(*list5_mark_));
      testAssert(list5_mark_->isEqualValue(*list6_mark_));
      testAssert(!list5_mark_->isEqualValue(*list7_mark_));
      testAssert(list6_mark_->isEqualValue(*list1_mark_));
      testAssert(list6_mark_->isEqualValue(*list3_mark_));
      testAssert(list6_mark_->isEqualValue(*list5_mark_));
      testAssert(list6_mark_->isEqualValue(*list6_mark_));
      testAssert(!list6_mark_->isEqualValue(*list7_mark_));
      testAssert(!list7_mark_->isEqualValue(*list1_mark_));
      testAssert(!list7_mark_->isEqualValue(*list3_mark_));
      testAssert(!list7_mark_->isEqualValue(*list5_mark_));
      testAssert(!list7_mark_->isEqualValue(*list6_mark_));
      testAssert(list7_mark_->isEqualValue(*list7_mark_));
      testAssert(!list1_mark_->isEqualValue(*null1_mark_));
      testAssert(!list1_mark_->isEqualValue(*str1_mark_));
      testAssert(!list1_mark_->isEqualValue(*int1_mark_));
      testAssert(!list1_mark_->isEqualValue(*fl1_mark_));
      testAssert(!list1_mark_->isEqualValue(*map1_mark_));

      testAssert(map1_mark_->isEqualValue(*map1_mark_));
      testAssert(map1_mark_->isEqualValue(*map3_mark_));
      testAssert(!map1_mark_->isEqualValue(*map5_mark_));
      testAssert(map1_mark_->isEqualValue(*map7_mark_));
      testAssert(map1_mark_->isEqualValue(*map8_mark_));
      testAssert(map1_mark_->isEqualValue(*map9_mark_));
      testAssert(map3_mark_->isEqualValue(*map1_mark_));
      testAssert(map3_mark_->isEqualValue(*map3_mark_));
      testAssert(!map3_mark_->isEqualValue(*map5_mark_));
      testAssert(map3_mark_->isEqualValue(*map7_mark_));
      testAssert(map3_mark_->isEqualValue(*map8_mark_));
      testAssert(map3_mark_->isEqualValue(*map9_mark_));
      testAssert(!map5_mark_->isEqualValue(*map1_mark_));
      testAssert(!map5_mark_->isEqualValue(*map3_mark_));
      testAssert(map5_mark_->isEqualValue(*map5_mark_));
      testAssert(!map5_mark_->isEqualValue(*map7_mark_));
      testAssert(!map5_mark_->isEqualValue(*map8_mark_));
      testAssert(!map5_mark_->isEqualValue(*map9_mark_));
      testAssert(map7_mark_->isEqualValue(*map1_mark_));
      testAssert(map7_mark_->isEqualValue(*map3_mark_));
      testAssert(!map7_mark_->isEqualValue(*map5_mark_));
      testAssert(map7_mark_->isEqualValue(*map7_mark_));
      testAssert(map7_mark_->isEqualValue(*map8_mark_));
      testAssert(map7_mark_->isEqualValue(*map9_mark_));
      testAssert(map8_mark_->isEqualValue(*map1_mark_));
      testAssert(map8_mark_->isEqualValue(*map3_mark_));
      testAssert(!map8_mark_->isEqualValue(*map5_mark_));
      testAssert(map8_mark_->isEqualValue(*map7_mark_));
      testAssert(map8_mark_->isEqualValue(*map8_mark_));
      testAssert(map8_mark_->isEqualValue(*map9_mark_));
      testAssert(map9_mark_->isEqualValue(*map1_mark_));
      testAssert(map9_mark_->isEqualValue(*map3_mark_));
      testAssert(!map9_mark_->isEqualValue(*map5_mark_));
      testAssert(map9_mark_->isEqualValue(*map7_mark_));
      testAssert(map9_mark_->isEqualValue(*map8_mark_));
      testAssert(map9_mark_->isEqualValue(*map9_mark_));
      testAssert(!map1_mark_->isEqualValue(*null1_mark_));
      testAssert(!map1_mark_->isEqualValue(*str1_mark_));
      testAssert(!map1_mark_->isEqualValue(*int1_mark_));
      testAssert(!map1_mark_->isEqualValue(*fl1_mark_));
      testAssert(!map1_mark_->isEqualValue(*list1_mark_));
    }
  }
}

} /* -- namespace Test */

} /* -- namespace OTest2 */
