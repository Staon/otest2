/*
 * Copyright (C) 2020 Ondrej Starek
 *
 * This file is part of OTest2.
 *
 * OTest2 is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OTest2 is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with OTest2.  If not, see <http://www.gnu.org/licenses/>.
 */
#include <otest2/otest2.h>

#include <iostream>
#include <otest2/userdata.h>
#include <string>

#include "runtime.h"

namespace OTest2 {

namespace Test {

TEST_SUITE(UserDataSuite) {
  TEST_CASE(UserDataOperations) {
    TEST_SIMPLE() {
      int int_value_(10);
      std::string str1_("Hello world");
      const std::string& str2_(str1_);

      UserData userdata_;
      userdata_.setDatum("int", &int_value_);
      userdata_.setDatum("str1", &str1_);
      userdata_.setDatum("str2", &str2_);

      /* -- check value */
      testAssertEqual(userdata_.getDatum<int>("int"), 10);
      testAssertEqual(userdata_.getDatum<const int>("int"), 10);

      /* -- modify value */
      userdata_.getDatum<int>("int") = 13;
      testAssertEqual(userdata_.getDatum<int>("int"), 13);
      userdata_.getDatum<int&>("int") = 666;
      testAssertEqual(userdata_.getDatum<int>("int"), 666);

      /* -- the string value - by value type and by reference type */
      testAssertEqual(userdata_.getDatum<std::string>("str1"), "Hello world");
      testAssertEqual(userdata_.getDatum<std::string&>("str1"), "Hello world");
      testAssertEqual(userdata_.getDatum<const std::string>("str1"), "Hello world");
      testAssertEqual(userdata_.getDatum<const std::string&>("str1"), "Hello world");

      /* -- stored constant object */
      testTry {
        userdata_.getDatum<std::string>("str2");
      }
      testCatch(UserDataWrongTypeException&, exc_) {
        /* -- I don't check the message because it's platform dependent */
      }
      testTry {
        userdata_.getDatum<std::string&>("str2");
      }
      testCatch(UserDataWrongTypeException&, exc_) {
        /* -- I don't check the message because it's platform dependent */
      }
      testAssertEqual(userdata_.getDatum<const std::string>("str2"), "Hello world");
      testAssertEqual(userdata_.getDatum<const std::string&>("str2"), "Hello world");

      /* -- missing user data value */
      testTry {
        userdata_.getDatum<int>("wrong key");
      }
      testCatch(UserDataMissingException&, exc_) {

      }
    }
  }

  TEST_CASE(UserDataCorrectlyPassed) {
    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "enterSuite<UserDataSuite>",
        "enterCase<UserDataCase>",
        "enterState<AnonymousState>",
        "assert<check 'a == b' has passed>: passed",
        "message<a = 23>",
        "message<b = 23>",
        "leaveAssert<>",
        "assert<check 'a == b' has passed>: passed",
        "message<a = 23>",
        "message<b = 23>",
        "leaveAssert<>",
        "assert<check 'a == b' has passed>: passed",
        "message<a = 'suite user data'>",
        "message<b = 'suite user data'>",
        "leaveAssert<>",
        "assert<check 'a == b' has passed>: passed",
        "message<a = 'suite user data'>",
        "message<b = 'suite user data'>",
        "leaveAssert<>",
        "assert<check 'a == b' has passed>: passed",
        "message<a = 'case user data'>",
        "message<b = 'case user data'>",
        "leaveAssert<>",
        "assert<check 'a == b' has passed>: passed",
        "message<a = 'case user data'>",
        "message<b = 'case user data'>",
        "leaveAssert<>",
        "leaveState<AnonymousState>: passed",
        "leaveCase<UserDataCase>: passed",
        "leaveSuite<UserDataSuite>: passed",
        "leaveTest<selftest>: passed",
      };
      int suite_int_(23);
      std::string suite_str_("suite user data");
      std::string case_str_("case user data");

      Runtime runtime_("UserDataSuite", "UserDataCase");
      runtime_.user_data.setDatum("suite_int", &suite_int_);
      runtime_.user_data.setDatum("suite_str", &suite_str_);
      runtime_.user_data.setDatum("case_str", &case_str_);

      testAssert(runtime_.runTheTest());
      testAssert(runtime_.reporter.checkRecords(data_));
//      runtime_.reporter.dumpRecords(std::cout);

      testAssertEqual(suite_int_, 2 * 23);
      testAssertEqual(suite_str_, "changed suite data");
    }
  }

  TEST_CASE(UserDataFailedCase) {
    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "path: selftest",
        "enterSuite<UserDataFailedCase>",
        "path: selftest::UserDataFailedCase",
        "error<unexpected exception: missing user datum 'case_str'>: failed",
        "path: selftest::UserDataFailedCase::UserDataCase",
        "leaveAssert<>",
        "path: selftest::UserDataFailedCase::UserDataCase",
        "leaveSuite<UserDataFailedCase>: failed",
        "path: selftest::UserDataFailedCase",
        "leaveTest<selftest>: failed",
        "path: selftest",
      };

      Runtime runtime_("UserDataFailedCase", "UserDataCase", Runtime::report_paths_mark);

      testAssert(!runtime_.runTheTest());
      testAssert(runtime_.reporter.checkRecords(data_));
//      runtime_.reporter.dumpRecords(std::cout);
    }
  }

  TEST_CASE(UserDataFailedSuite) {
    TEST_SIMPLE() {
      std::vector<const char*> data_{
        "enterTest<selftest>",
        "path: selftest",
        "error<unexpected exception: missing user datum 'suite_str'>: failed",
        "path: selftest::UserDataFailedSuite",
        "leaveAssert<>",
        "path: selftest::UserDataFailedSuite",
        "leaveTest<selftest>: failed",
        "path: selftest",
      };

      Runtime runtime_("UserDataFailedSuite", "UserDataCase", Runtime::report_paths_mark);

      testAssert(!runtime_.runTheTest());
      testAssert(runtime_.reporter.checkRecords(data_));
//      runtime_.reporter.dumpRecords(std::cout);
    }
  }
}

} /* -- namespace Test */

} /* -- namespace OTest2 */
